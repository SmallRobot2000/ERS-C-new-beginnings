;
; File generated by cc65 v 2.19 - Git 925a589
;
	.fopt		compiler,"cc65 v 2.19 - Git 925a589"
	.setcpu		"65SC02"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.export		_fs_Init
	.export		_fs_format
	.export		_SD_writeBlock
	.export		_SD_readBlock
	.export		_printHex32
	.import		_print_hex
	.import		_SDSPI_readMultStart
	.import		_SDSPI_readMultContinue
	.import		_SDSPI_readMultEnd
	.import		_SDSPI_writeMultStart
	.import		_SDSPI_writeMultContinue
	.import		_SDSPI_writeMultEnd
	.import		_puts
	.export		_superBlock

.segment	"RODATA"

S0002:
	.byte	$32,$00
S0003:
	.byte	$33,$00
S0001:
	.byte	$31,$00

.segment	"BSS"

_superBlock:
	.res	52,$00

; ---------------------------------------------------------------
; unsigned char __near__ fs_Init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fs_Init: near

.segment	"CODE"

	lda     #$A0
	sta     _superBlock+3
	sta     _superBlock+2
	lda     #$55
	sta     _superBlock+1
	lda     #$FF
	sta     _superBlock
	stz     _superBlock+4+3
	lda     #$10
	sta     _superBlock+4+2
	stz     _superBlock+4+1
	stz     _superBlock+4
	stz     _superBlock+31+3
	stz     _superBlock+31+2
	lda     #$08
	sta     _superBlock+31+1
	stz     _superBlock+31
	lda     #$80
	sta     _superBlock+35
	ldx     #$00
	txa
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ fs_format (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fs_format: near

.segment	"CODE"

	ldx     #$00
	txa
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ SD_writeBlock (unsigned long blockNum, void *buffer)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_SD_writeBlock: near

.segment	"CODE"

	jsr     pushax
	lda     #$00
	jsr     pusha
	jsr     push0
	ldy     #$02
	lda     (sp),y
	jsr     pusha0
	ldy     #$0A
	jsr     ldeaxysp
	jsr     shleax3
	jsr     _SDSPI_writeMultStart
	jsr     tosorax
	ldy     #$02
	sta     (sp),y
	lda     #$00
	sta     (sp)
	dey
	sta     (sp),y
L0002:	ldy     #$01
	lda     (sp),y
	tax
	lda     (sp)
	cmp     #$08
	txa
	sbc     #$00
	bvc     L0006
	eor     #$80
L0006:	bpl     L0003
	iny
	lda     (sp),y
	jsr     pusha0
	ldy     #$02
	lda     (sp),y
	sta     tmp1
	lda     #$00
	asl     a
	rol     tmp1
	clc
	ldy     #$05
	lda     (sp),y
	pha
	lda     tmp1
	iny
	adc     (sp),y
	tax
	pla
	jsr     _SDSPI_writeMultContinue
	jsr     tosorax
	ldy     #$02
	sta     (sp),y
	ldx     #$00
	lda     #$01
	jsr     addeq0sp
	bra     L0002
L0003:	iny
	lda     (sp),y
	jsr     pusha0
	jsr     _SDSPI_writeMultEnd
	jsr     tosorax
	ldy     #$02
	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	ldy     #$09
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ SD_readBlock (unsigned long blockNum, void *buffer)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_SD_readBlock: near

.segment	"CODE"

	jsr     pushax
	lda     #$00
	jsr     pusha
	jsr     push0
	ldy     #$02
	lda     (sp),y
	jsr     pusha0
	ldy     #$0A
	jsr     ldeaxysp
	jsr     shleax3
	jsr     _SDSPI_readMultStart
	jsr     tosorax
	ldy     #$02
	sta     (sp),y
	lda     (sp),y
	beq     L000B
	lda     #<(S0001)
	ldx     #>(S0001)
	jsr     _puts
L000B:	lda     #$00
	sta     (sp)
	ldy     #$01
	sta     (sp),y
L0003:	ldy     #$01
	lda     (sp),y
	tax
	lda     (sp)
	cmp     #$08
	txa
	sbc     #$00
	bvc     L0007
	eor     #$80
L0007:	bpl     L0004
	iny
	lda     (sp),y
	jsr     pusha0
	ldy     #$02
	lda     (sp),y
	sta     tmp1
	lda     #$00
	asl     a
	rol     tmp1
	clc
	ldy     #$05
	lda     (sp),y
	pha
	lda     tmp1
	iny
	adc     (sp),y
	tax
	pla
	jsr     _SDSPI_readMultContinue
	jsr     tosorax
	ldy     #$02
	sta     (sp),y
	lda     (sp),y
	beq     L0005
	lda     #<(S0002)
	ldx     #>(S0002)
	jsr     _puts
L0005:	ldx     #$00
	lda     #$01
	jsr     addeq0sp
	bra     L0003
L0004:	iny
	lda     (sp),y
	jsr     pusha0
	jsr     _SDSPI_readMultEnd
	jsr     tosorax
	ldy     #$02
	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	beq     L000D
	lda     #<(S0003)
	ldx     #>(S0003)
	jsr     _puts
	ldy     #$02
	ldx     #$00
L000D:	lda     (sp),y
	ldy     #$09
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ printHex32 (unsigned long n)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_printHex32: near

.segment	"CODE"

	jsr     pusheax
	jsr     ldeax0sp
	lda     sreg+1
	jsr     _print_hex
	jsr     ldeax0sp
	lda     sreg
	jsr     _print_hex
	jsr     ldeax0sp
	txa
	jsr     _print_hex
	lda     (sp)
	jsr     _print_hex
	jmp     incsp4

.endproc

