; ---------------------------------------------------------------------------
; xmul.a65
; ---------------------------------------------------------------------------
;
; Fixed Point Multiply
;

.import		popeax, negeax
.importzp	sreg, tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
.export		_xmul

.segment "CODE"

.PC02		; Force 65C02 assembly mode

; ---------------------------------------------------------------------------
; fix16_t __fastcall__ xmul(fix16_t multiplier, fix16_t multiplicand);

; Software Stack+0 [...x] Input1
; Software Stack+1 [..x.] Input1
; Software Stack+2 [.x..] Input1
; Software Stack+3 [x...] Input1
; A				   [...x] Input2
; X				   [..x.] Input2
; sreg			   [.x..] Input2
; sreg+1		   [x...] Input2

; SP:	1 - multiplier   [...x]
;		2 - multiplier   [..x.]
;		3 - multiplier   [.x..]
;		4 - multiplier   [x...]
;		5 - multiplicand [...x]
;		6 - multiplicand [..x.]
;		7 - multiplicand [.x..]
;		8 - multiplicand [x...]


.proc _xmul: near
	STZ tmp1		; Clear tmp1
	
	TAY				; Put the [...x] Byte into Y for now
	LDA sreg + 1
	BPL @IN2POS		; Check if Input2 is Negative
	LDA tmp1		; If it is, Invert tmp1
	EOR #$FF
	STA tmp1
	
	TYA				; Get the [...x] Byte back from Y
	JSR negeax		; Get the 2's Complement of Input2 (A/X/SREG)
	TAY				; And back it goes into Y
	LDA sreg + 1	; Load the [x...] Byte for the next part
	
	@IN2POS:
	PHA
	LDA sreg
	PHA
	PHX
	PHY				; Save Input2 onto the Stack
	
	@IN1:
	JSR popeax		; Get Input1 from the Software Stack
	TAY				; Put the [...x] Byte into Y for now
	LDA sreg + 1
	BPL @IN1POS		; Check if Input1 is Negative
	LDA tmp1		; If it is, Invert tmp1
	EOR #$FF
	STA tmp1
	
	TYA				; Get the [...x] Byte back from Y
	JSR negeax		; Get the 2's Complement of Input1 (A/X/SREG)
	TAY				; And back it goes into Y
	LDA sreg + 1	; Load the [x...] Byte for the next part
	
	@IN1POS:
	PHA
	LDA sreg
	PHA
	PHX
	PHY				; Save Input1 onto the Stack
	
	
	
	
	
	@MUL32:			; 32bx32b=64b Multiplication
	STZ	ptr3		; Clear upper bits of product
	STZ	ptr3 + 1
	STZ	ptr4
	STZ	ptr4 + 1
	LDY	#32			; Set count to 32
	TSX				; Get the Stack in X
	@SHIFT_R:
	LDA $0104,X
	ASL
	ROR $0104,X		; This LDA/ASL/ROR Sequence acts like an ASR Instruction
	ROR $0103,X
	ROR $0102,X
	ROR $0101,X		; Divide multiplier by 2
	BCC @ROTATE_R
	CLC
	LDA ptr3		; Get upper half of product and add multiplicand
	ADC $0105,X
	STA ptr3
	LDA ptr3 + 1
	ADC $0106,X
	STA ptr3 + 1
	LDA ptr4
	ADC $0107,X
	STA ptr4
	LDA ptr4 + 1
	ADC $0108,X
	@ROTATE_R:
	ROR				; Rotate partial product
	STA ptr4 + 1
	ROR ptr4
	ROR ptr3 + 1
	ROR ptr3
	ROR ptr2 + 1
	ROR ptr2
	ROR ptr1 + 1
	ROR ptr1
	DEY
	BNE @SHIFT_R
	; Result is now in:
	; P4+1 P4+0 P3+1 P3+0 P2+1 P2+0 P1+1 P1+0
	;  II   II   II   II   FF   FF   FF   FF
	;  --   --   S1   S0   X    A    --   --
	
	TXA
	CLC
	ADC #8
	TAX
	TXS				; Adjust the SP by 8 bytes (simplier than 8x PLA)
	
	
	LDA tmp1		; Check if the Output is Negative
	BMI @ISNEG
	
	LDA ptr1 + 1
	ASL				; Put the MSB of the 2nd Lowest Fractional Byte into the Carry
	LDA ptr2
	ADC #0			; Add the Carry to the Low Byte of the Fractional Part
	TAY				; Put it into Y for now
	LDA ptr2 + 1
	ADC #0			; Add the Carry to the High Byte of the Fractional Part
	TAX				; Put it into X [..x.]
	LDA ptr3
	ADC #0			; Add the Carry to the Low Byte of the Integer Part
	STA sreg		; Put it into SREG [.x..]
	LDA ptr3 + 1
	ADC #0			; Add the Carry to the High Byte of the Integer Part
	STA sreg + 1	; Put it into SREG [x...]
	TYA				; Get the Lowest Byte back from Y [...x]
RTS

	@ISNEG:
	LDA ptr1 + 1
	EOR #$80		; Invert the MSB
	ASL				; Put the Inverted MSB of the 2nd Lowest Fractional Byte into the Carry
	LDA #0
	SBC ptr2		; Subtract the Low Byte of the Fractional Part from the Carry
	TAY				; Put it into Y for now
	LDA #0
	SBC ptr2 + 1	; Subtract the High Byte of the Fractional Part from the Carry
	TAX				; Put it into X [..x.]
	LDA #0
	SBC ptr3		; Subtract the Low Byte of the Integer Part from the Carry
	STA sreg		; Put it into SREG [.x..]
	LDA #0
	SBC ptr3 + 1	; Subtract the High Byte of the Integer Part from the Carry
	STA sreg + 1	; Put it into SREG [x...]
	TYA				; Get the Lowest Byte back from Y [...x]
RTS
.endproc

; Negative:
; Don't Round:
;  0 - Result = -Result
; Round:
; -1 - Result = -(Result+1)


; A				   [...x] Input2
; X				   [..x.] Input2
; sreg			   [.x..] Input2
; sreg+1		   [x...] Input2