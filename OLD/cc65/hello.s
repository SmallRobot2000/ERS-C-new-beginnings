;
; File generated by cc65 v 2.19 - Git a7676bd
;
	.fopt		compiler,"cc65 v 2.19 - Git a7676bd"
	.setcpu		"65SC02"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_strcat
	.import		_strcmp
	.import		_strcpy
	.import		_strtok
	.import		_abs
	.import		_itoa
	.import		_ltoa
	.export		_font
	.export		_IRQCounter
	.export		_publicVDPIe
	.import		_VDP_W_REG
	.import		_VDP_W_VRAM
	.import		_VDP_W_BLOCK_asm
	.export		_VDP_W_BLOCK
	.export		_VbufferPublic
	.export		_CurrentMode
	.export		_VDPnameTableAddress
	.export		_VDPspriteAttributeAddress
	.export		_VDPpaterGeneratorAddress
	.export		_VDPcolorTableAddress
	.export		_VDPspriteGeneratorAddress
	.export		_VDPreg2AddNum
	.export		_VDPreg3AddNum
	.export		_VDPreg4AddNum
	.export		_VDPreg5AddNum
	.export		_VDPreg6AddNum
	.export		_transperent
	.export		_black
	.export		_mediumGreen
	.export		_lightGreen
	.export		_darkBlue
	.export		_lightBlue
	.export		_darkRed
	.export		_cyan
	.export		_mediumRed
	.export		_lightRed
	.export		_darkYellow
	.export		_lightYellow
	.export		_darkGreen
	.export		_magenta
	.export		_gray
	.export		_white
	.export		_charGraphMode1
	.export		_charGraphMode2
	.export		_multicolorMode
	.export		_textMode
	.export		_SCREEN_WIDTH_CHAR
	.export		_initVDP
	.export		_colorGraphicsVDP
	.export		_colorBorderVDP
	.export		_printChar
	.export		_printf
	.export		_scrollScreen
	.export		_updateScreen
	.export		_shiftCodeLeft
	.export		_shiftCodeRight
	.export		_releseCode
	.export		_ACIA_data
	.export		_ACIA_stat
	.export		_ACIA_cmd
	.export		_ACIA_ctrl
	.export		_shifted
	.export		_relesed
	.import		_setIrqErs
	.import		_getKeyCode
	.import		_getKeyMap
	.import		_getKeyMapShifted
	.export		_ACIAinit
	.export		_KeyBufferCounter
	.export		_KeyBuffer
	.export		_n
	.export		_fix8_mul
	.export		_fix8_div
	.export		_fix8_from_int
	.export		_fix8_to_int
	.export		_fixedDec_to_int
	.export		_int_to_string
	.export		_printFix
	.export		_printInt
	.export		_putpixel
	.export		_drawLine
	.export		_drawRectangle
	.export		_darwStaticCube
	.import		_putByteEMem
	.import		_getByteEMem
	.import		_EMem_int
	.import		_isVDPIRQ
	.export		___TimeCunterCursor
	.export		___TimeCunter
	.export		___deltaTimeStamp
	.export		_publicunixTimestamp
	.export		___CursorState
	.export		_initIO
	.export		_updateTimeStamp
	.export		_interupt
	.export		_FloppyBuffer
	.export		_FloppyBuffer1
	.export		_blockState
	.import		_FloppySetReceveSerial
	.import		_FloppySetSendSerial
	.import		_FloppySendSerial
	.import		_FloppyReceveSerial
	.import		_waite
	.export		_FloppySendBlock
	.export		_FloppyReceveBlock
	.export		_FloppySendCommand
	.export		_FloppySaveSector
	.export		_FloppyLoadSector
	.export		_FloppyMotorOn
	.export		_FloppyHaveDisk
	.export		_FloppyMotorOff
	.export		_FloppyMotorRunning
	.export		_floppyEncodeBlock
	.export		_floppyDecodeBlock
	.export		_floppyDecodeTrack
	.export		_floppyDecodeSide
	.export		_floppyChekBlockFree
	.export		_floppyMakeBlockFree
	.export		_floppyMakeBlockOccupide
	.export		_floppyLoadBlockState
	.export		_floppySaveBlockState
	.export		_dateToTimestamp
	.export		_timestampToDate
	.export		_userInput
	.export		_carc
	.export		_b
	.export		_i
	.export		_d
	.export		_StrBuffer
	.export		_InputKeyBuffer
	.export		_InputKeyBufferPointer
	.export		__FtPtBuffer
	.export		_z
	.export		_karnelX
	.export		_karnelY
	.export		_keyStringTable
	.export		_OldKeyBufferCounter
	.export		_TknErr
	.export		_TknDir
	.export		_TknPwd
	.export		_TknRoot
	.export		_TknCd
	.export		_TknMkDir
	.export		_TknMkFile
	.export		_TknFromat
	.export		_TknCls
	.export		_TknTstEx
	.export		_funcParametar
	.export		_curBlock
	.export		_FloppySaveSectorNum
	.export		_karnelPrint
	.export		_formatHeader
	.export		_alocateBlock
	.export		_mkFile
	.export		_mkDir
	.export		_resetBlockPath
	.export		_floppyFormatNew
	.export		_printHeader
	.export		_floppyLoadBlockNum
	.export		_dumpDirectory
	.export		_keyBoardInputToBufferUpdate
	.export		_UpdateParse
	.export		_openRoot
	.export		_lastDirectory
	.export		_openLastDirectory
	.export		_printPath
	.export		_findEntry
	.export		_findOpenDirectory
	.export		_makeDirectory
	.export		_makeFile
	.export		_testExMem
	.export		_doFunction
	.export		_main

.segment	"DATA"

_font:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$38
	.byte	$44
	.byte	$6C
	.byte	$44
	.byte	$54
	.byte	$44
	.byte	$38
	.byte	$00
	.byte	$38
	.byte	$7C
	.byte	$54
	.byte	$7C
	.byte	$44
	.byte	$7C
	.byte	$38
	.byte	$00
	.byte	$00
	.byte	$28
	.byte	$7C
	.byte	$7C
	.byte	$7C
	.byte	$38
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$38
	.byte	$7C
	.byte	$7C
	.byte	$38
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$38
	.byte	$38
	.byte	$10
	.byte	$7C
	.byte	$7C
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$38
	.byte	$7C
	.byte	$7C
	.byte	$10
	.byte	$38
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$FC
	.byte	$FC
	.byte	$FC
	.byte	$CC
	.byte	$CC
	.byte	$FC
	.byte	$FC
	.byte	$FC
	.byte	$00
	.byte	$00
	.byte	$78
	.byte	$48
	.byte	$48
	.byte	$78
	.byte	$00
	.byte	$00
	.byte	$FC
	.byte	$FC
	.byte	$84
	.byte	$B4
	.byte	$B4
	.byte	$84
	.byte	$FC
	.byte	$FC
	.byte	$00
	.byte	$1C
	.byte	$0C
	.byte	$34
	.byte	$48
	.byte	$48
	.byte	$30
	.byte	$00
	.byte	$38
	.byte	$44
	.byte	$44
	.byte	$38
	.byte	$10
	.byte	$38
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$18
	.byte	$14
	.byte	$10
	.byte	$30
	.byte	$70
	.byte	$60
	.byte	$00
	.byte	$0C
	.byte	$34
	.byte	$2C
	.byte	$34
	.byte	$2C
	.byte	$6C
	.byte	$60
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$38
	.byte	$6C
	.byte	$38
	.byte	$54
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$30
	.byte	$38
	.byte	$3C
	.byte	$38
	.byte	$30
	.byte	$20
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$38
	.byte	$78
	.byte	$38
	.byte	$18
	.byte	$08
	.byte	$00
	.byte	$10
	.byte	$38
	.byte	$7C
	.byte	$10
	.byte	$7C
	.byte	$38
	.byte	$10
	.byte	$00
	.byte	$28
	.byte	$28
	.byte	$28
	.byte	$28
	.byte	$28
	.byte	$00
	.byte	$28
	.byte	$00
	.byte	$3C
	.byte	$54
	.byte	$54
	.byte	$34
	.byte	$14
	.byte	$14
	.byte	$14
	.byte	$00
	.byte	$38
	.byte	$44
	.byte	$30
	.byte	$28
	.byte	$18
	.byte	$44
	.byte	$38
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$78
	.byte	$78
	.byte	$00
	.byte	$10
	.byte	$38
	.byte	$7C
	.byte	$10
	.byte	$7C
	.byte	$38
	.byte	$10
	.byte	$38
	.byte	$10
	.byte	$38
	.byte	$7C
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$7C
	.byte	$38
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$18
	.byte	$7C
	.byte	$18
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$7C
	.byte	$30
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$7C
	.byte	$00
	.byte	$00
	.byte	$28
	.byte	$28
	.byte	$7C
	.byte	$28
	.byte	$28
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$38
	.byte	$38
	.byte	$7C
	.byte	$7C
	.byte	$00
	.byte	$00
	.byte	$7C
	.byte	$7C
	.byte	$38
	.byte	$38
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$38
	.byte	$38
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$6C
	.byte	$6C
	.byte	$48
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$28
	.byte	$7C
	.byte	$28
	.byte	$28
	.byte	$7C
	.byte	$28
	.byte	$00
	.byte	$20
	.byte	$38
	.byte	$40
	.byte	$30
	.byte	$08
	.byte	$70
	.byte	$10
	.byte	$00
	.byte	$64
	.byte	$64
	.byte	$08
	.byte	$10
	.byte	$20
	.byte	$4C
	.byte	$4C
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$50
	.byte	$20
	.byte	$54
	.byte	$48
	.byte	$34
	.byte	$00
	.byte	$30
	.byte	$30
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$10
	.byte	$00
	.byte	$20
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$28
	.byte	$38
	.byte	$7C
	.byte	$38
	.byte	$28
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$7C
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$30
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$7C
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$10
	.byte	$20
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$38
	.byte	$44
	.byte	$4C
	.byte	$54
	.byte	$64
	.byte	$44
	.byte	$38
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$38
	.byte	$00
	.byte	$38
	.byte	$44
	.byte	$04
	.byte	$18
	.byte	$20
	.byte	$40
	.byte	$7C
	.byte	$00
	.byte	$38
	.byte	$44
	.byte	$04
	.byte	$38
	.byte	$04
	.byte	$44
	.byte	$38
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$28
	.byte	$48
	.byte	$7C
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$7C
	.byte	$40
	.byte	$40
	.byte	$78
	.byte	$04
	.byte	$44
	.byte	$38
	.byte	$00
	.byte	$18
	.byte	$20
	.byte	$40
	.byte	$78
	.byte	$44
	.byte	$44
	.byte	$38
	.byte	$00
	.byte	$7C
	.byte	$04
	.byte	$08
	.byte	$10
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$00
	.byte	$38
	.byte	$44
	.byte	$44
	.byte	$38
	.byte	$44
	.byte	$44
	.byte	$38
	.byte	$00
	.byte	$38
	.byte	$44
	.byte	$44
	.byte	$3C
	.byte	$04
	.byte	$08
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$30
	.byte	$00
	.byte	$30
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$30
	.byte	$00
	.byte	$30
	.byte	$30
	.byte	$20
	.byte	$08
	.byte	$10
	.byte	$20
	.byte	$40
	.byte	$20
	.byte	$10
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$7C
	.byte	$00
	.byte	$00
	.byte	$7C
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$10
	.byte	$08
	.byte	$04
	.byte	$08
	.byte	$10
	.byte	$20
	.byte	$00
	.byte	$38
	.byte	$44
	.byte	$04
	.byte	$18
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$38
	.byte	$44
	.byte	$5C
	.byte	$54
	.byte	$5C
	.byte	$40
	.byte	$38
	.byte	$00
	.byte	$38
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$7C
	.byte	$44
	.byte	$44
	.byte	$00
	.byte	$78
	.byte	$44
	.byte	$44
	.byte	$78
	.byte	$44
	.byte	$44
	.byte	$78
	.byte	$00
	.byte	$38
	.byte	$44
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$44
	.byte	$38
	.byte	$00
	.byte	$78
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$78
	.byte	$00
	.byte	$7C
	.byte	$40
	.byte	$40
	.byte	$78
	.byte	$40
	.byte	$40
	.byte	$7C
	.byte	$00
	.byte	$7C
	.byte	$40
	.byte	$40
	.byte	$78
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$38
	.byte	$44
	.byte	$40
	.byte	$5C
	.byte	$44
	.byte	$44
	.byte	$3C
	.byte	$00
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$7C
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$00
	.byte	$38
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$38
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$44
	.byte	$44
	.byte	$38
	.byte	$00
	.byte	$44
	.byte	$48
	.byte	$50
	.byte	$60
	.byte	$50
	.byte	$48
	.byte	$44
	.byte	$00
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$7C
	.byte	$00
	.byte	$44
	.byte	$6C
	.byte	$54
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$00
	.byte	$44
	.byte	$64
	.byte	$54
	.byte	$4C
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$00
	.byte	$38
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$38
	.byte	$00
	.byte	$78
	.byte	$44
	.byte	$44
	.byte	$78
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$38
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$54
	.byte	$48
	.byte	$34
	.byte	$00
	.byte	$78
	.byte	$44
	.byte	$44
	.byte	$78
	.byte	$48
	.byte	$44
	.byte	$44
	.byte	$00
	.byte	$38
	.byte	$44
	.byte	$40
	.byte	$38
	.byte	$04
	.byte	$44
	.byte	$38
	.byte	$00
	.byte	$7C
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$38
	.byte	$00
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$28
	.byte	$10
	.byte	$00
	.byte	$44
	.byte	$44
	.byte	$54
	.byte	$54
	.byte	$54
	.byte	$54
	.byte	$28
	.byte	$00
	.byte	$44
	.byte	$44
	.byte	$28
	.byte	$10
	.byte	$28
	.byte	$44
	.byte	$44
	.byte	$00
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$28
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$78
	.byte	$08
	.byte	$10
	.byte	$20
	.byte	$40
	.byte	$40
	.byte	$78
	.byte	$00
	.byte	$38
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$38
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$20
	.byte	$10
	.byte	$08
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$38
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$38
	.byte	$00
	.byte	$10
	.byte	$28
	.byte	$44
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$FC
	.byte	$30
	.byte	$30
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$38
	.byte	$04
	.byte	$3C
	.byte	$44
	.byte	$3C
	.byte	$00
	.byte	$40
	.byte	$40
	.byte	$78
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$78
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$38
	.byte	$44
	.byte	$40
	.byte	$44
	.byte	$38
	.byte	$00
	.byte	$04
	.byte	$04
	.byte	$3C
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$3C
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$38
	.byte	$44
	.byte	$78
	.byte	$40
	.byte	$38
	.byte	$00
	.byte	$18
	.byte	$20
	.byte	$20
	.byte	$78
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$3C
	.byte	$44
	.byte	$44
	.byte	$3C
	.byte	$04
	.byte	$38
	.byte	$40
	.byte	$40
	.byte	$70
	.byte	$48
	.byte	$48
	.byte	$48
	.byte	$48
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$18
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$18
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$48
	.byte	$30
	.byte	$40
	.byte	$40
	.byte	$48
	.byte	$50
	.byte	$60
	.byte	$50
	.byte	$48
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$18
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$68
	.byte	$54
	.byte	$54
	.byte	$44
	.byte	$44
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$48
	.byte	$48
	.byte	$48
	.byte	$48
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$38
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$38
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$78
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$78
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$3C
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$3C
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$58
	.byte	$24
	.byte	$20
	.byte	$20
	.byte	$70
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$38
	.byte	$40
	.byte	$38
	.byte	$04
	.byte	$38
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$78
	.byte	$20
	.byte	$20
	.byte	$28
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$48
	.byte	$48
	.byte	$48
	.byte	$58
	.byte	$28
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$44
	.byte	$44
	.byte	$28
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$44
	.byte	$44
	.byte	$54
	.byte	$7C
	.byte	$28
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$48
	.byte	$48
	.byte	$30
	.byte	$48
	.byte	$48
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$48
	.byte	$48
	.byte	$48
	.byte	$38
	.byte	$10
	.byte	$60
	.byte	$00
	.byte	$00
	.byte	$78
	.byte	$08
	.byte	$30
	.byte	$40
	.byte	$78
	.byte	$00
	.byte	$18
	.byte	$20
	.byte	$20
	.byte	$60
	.byte	$20
	.byte	$20
	.byte	$18
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$30
	.byte	$08
	.byte	$08
	.byte	$0C
	.byte	$08
	.byte	$08
	.byte	$30
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$38
	.byte	$6C
	.byte	$44
	.byte	$44
	.byte	$7C
	.byte	$00
	.byte	$00
	.byte	$38
	.byte	$44
	.byte	$40
	.byte	$40
	.byte	$44
	.byte	$38
	.byte	$10
	.byte	$30
	.byte	$48
	.byte	$00
	.byte	$48
	.byte	$48
	.byte	$48
	.byte	$58
	.byte	$28
	.byte	$00
	.byte	$0C
	.byte	$00
	.byte	$38
	.byte	$44
	.byte	$78
	.byte	$40
	.byte	$38
	.byte	$00
	.byte	$38
	.byte	$00
	.byte	$38
	.byte	$04
	.byte	$3C
	.byte	$44
	.byte	$3C
	.byte	$00
	.byte	$28
	.byte	$00
	.byte	$38
	.byte	$04
	.byte	$3C
	.byte	$44
	.byte	$3C
	.byte	$00
	.byte	$30
	.byte	$00
	.byte	$38
	.byte	$04
	.byte	$3C
	.byte	$44
	.byte	$3C
	.byte	$00
	.byte	$38
	.byte	$28
	.byte	$38
	.byte	$04
	.byte	$3C
	.byte	$44
	.byte	$3C
	.byte	$00
	.byte	$00
	.byte	$38
	.byte	$44
	.byte	$40
	.byte	$44
	.byte	$38
	.byte	$10
	.byte	$30
	.byte	$38
	.byte	$00
	.byte	$38
	.byte	$44
	.byte	$78
	.byte	$40
	.byte	$38
	.byte	$00
	.byte	$28
	.byte	$00
	.byte	$38
	.byte	$44
	.byte	$78
	.byte	$40
	.byte	$38
	.byte	$00
	.byte	$30
	.byte	$00
	.byte	$38
	.byte	$44
	.byte	$78
	.byte	$40
	.byte	$38
	.byte	$00
	.byte	$28
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$18
	.byte	$00
	.byte	$10
	.byte	$28
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$18
	.byte	$00
	.byte	$20
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$18
	.byte	$00
	.byte	$28
	.byte	$00
	.byte	$10
	.byte	$28
	.byte	$44
	.byte	$7C
	.byte	$44
	.byte	$00
	.byte	$38
	.byte	$28
	.byte	$38
	.byte	$6C
	.byte	$44
	.byte	$7C
	.byte	$44
	.byte	$00
	.byte	$0C
	.byte	$00
	.byte	$7C
	.byte	$40
	.byte	$78
	.byte	$40
	.byte	$7C
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$78
	.byte	$14
	.byte	$7C
	.byte	$50
	.byte	$3C
	.byte	$00
	.byte	$3C
	.byte	$50
	.byte	$50
	.byte	$7C
	.byte	$50
	.byte	$50
	.byte	$5C
	.byte	$00
	.byte	$38
	.byte	$00
	.byte	$30
	.byte	$48
	.byte	$48
	.byte	$48
	.byte	$30
	.byte	$00
	.byte	$28
	.byte	$00
	.byte	$30
	.byte	$48
	.byte	$48
	.byte	$48
	.byte	$30
	.byte	$00
	.byte	$60
	.byte	$00
	.byte	$30
	.byte	$48
	.byte	$48
	.byte	$48
	.byte	$30
	.byte	$00
	.byte	$38
	.byte	$00
	.byte	$48
	.byte	$48
	.byte	$48
	.byte	$58
	.byte	$28
	.byte	$00
	.byte	$60
	.byte	$00
	.byte	$48
	.byte	$48
	.byte	$48
	.byte	$58
	.byte	$28
	.byte	$00
	.byte	$28
	.byte	$00
	.byte	$48
	.byte	$48
	.byte	$48
	.byte	$38
	.byte	$10
	.byte	$60
	.byte	$48
	.byte	$30
	.byte	$48
	.byte	$48
	.byte	$48
	.byte	$48
	.byte	$30
	.byte	$00
	.byte	$28
	.byte	$00
	.byte	$48
	.byte	$48
	.byte	$48
	.byte	$48
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$38
	.byte	$40
	.byte	$40
	.byte	$38
	.byte	$10
	.byte	$00
	.byte	$18
	.byte	$24
	.byte	$20
	.byte	$78
	.byte	$20
	.byte	$24
	.byte	$5C
	.byte	$00
	.byte	$44
	.byte	$28
	.byte	$10
	.byte	$7C
	.byte	$10
	.byte	$7C
	.byte	$10
	.byte	$00
	.byte	$60
	.byte	$50
	.byte	$50
	.byte	$68
	.byte	$5C
	.byte	$48
	.byte	$48
	.byte	$00
	.byte	$08
	.byte	$14
	.byte	$10
	.byte	$38
	.byte	$10
	.byte	$10
	.byte	$50
	.byte	$20
	.byte	$18
	.byte	$00
	.byte	$38
	.byte	$04
	.byte	$3C
	.byte	$44
	.byte	$3C
	.byte	$00
	.byte	$18
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$18
	.byte	$00
	.byte	$18
	.byte	$00
	.byte	$30
	.byte	$48
	.byte	$48
	.byte	$48
	.byte	$30
	.byte	$00
	.byte	$18
	.byte	$00
	.byte	$48
	.byte	$48
	.byte	$48
	.byte	$58
	.byte	$28
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$00
	.byte	$70
	.byte	$48
	.byte	$48
	.byte	$48
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$00
	.byte	$48
	.byte	$68
	.byte	$58
	.byte	$48
	.byte	$00
	.byte	$38
	.byte	$04
	.byte	$3C
	.byte	$44
	.byte	$3C
	.byte	$00
	.byte	$3C
	.byte	$00
	.byte	$30
	.byte	$48
	.byte	$48
	.byte	$48
	.byte	$30
	.byte	$00
	.byte	$78
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$40
	.byte	$44
	.byte	$38
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$7C
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$FC
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$48
	.byte	$50
	.byte	$38
	.byte	$44
	.byte	$08
	.byte	$1C
	.byte	$00
	.byte	$40
	.byte	$48
	.byte	$50
	.byte	$2C
	.byte	$54
	.byte	$1C
	.byte	$04
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$38
	.byte	$38
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$24
	.byte	$48
	.byte	$24
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$48
	.byte	$24
	.byte	$48
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$00
	.byte	$A8
	.byte	$00
	.byte	$54
	.byte	$00
	.byte	$A8
	.byte	$00
	.byte	$54
	.byte	$A8
	.byte	$54
	.byte	$A8
	.byte	$54
	.byte	$A8
	.byte	$54
	.byte	$A8
	.byte	$A8
	.byte	$FC
	.byte	$54
	.byte	$FC
	.byte	$A8
	.byte	$FC
	.byte	$54
	.byte	$FC
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$F0
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$F0
	.byte	$10
	.byte	$F0
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$D0
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$00
	.byte	$F0
	.byte	$10
	.byte	$F0
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$50
	.byte	$D0
	.byte	$10
	.byte	$D0
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$00
	.byte	$F0
	.byte	$10
	.byte	$D0
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$D0
	.byte	$10
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$F0
	.byte	$10
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$1C
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$FC
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$FC
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$1C
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$FC
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$1C
	.byte	$10
	.byte	$1C
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$5C
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$5C
	.byte	$40
	.byte	$7C
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$7C
	.byte	$40
	.byte	$5C
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DC
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$DC
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$5C
	.byte	$40
	.byte	$5C
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$50
	.byte	$DC
	.byte	$00
	.byte	$DC
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$10
	.byte	$FC
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$FC
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$FC
	.byte	$00
	.byte	$FC
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$FC
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$7C
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$1C
	.byte	$10
	.byte	$1C
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1C
	.byte	$10
	.byte	$1C
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$7C
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DC
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$10
	.byte	$FC
	.byte	$00
	.byte	$FC
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1C
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$FC
	.byte	$FC
	.byte	$FC
	.byte	$FC
	.byte	$FC
	.byte	$FC
	.byte	$FC
	.byte	$FC
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$FC
	.byte	$FC
	.byte	$FC
	.byte	$FC
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$E0
	.byte	$1C
	.byte	$1C
	.byte	$1C
	.byte	$1C
	.byte	$1C
	.byte	$1C
	.byte	$1C
	.byte	$1C
	.byte	$FC
	.byte	$FC
	.byte	$FC
	.byte	$FC
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$34
	.byte	$48
	.byte	$48
	.byte	$34
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$48
	.byte	$70
	.byte	$48
	.byte	$48
	.byte	$70
	.byte	$40
	.byte	$78
	.byte	$48
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$7C
	.byte	$28
	.byte	$28
	.byte	$28
	.byte	$28
	.byte	$28
	.byte	$00
	.byte	$78
	.byte	$48
	.byte	$20
	.byte	$10
	.byte	$20
	.byte	$48
	.byte	$78
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$3C
	.byte	$48
	.byte	$48
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$48
	.byte	$48
	.byte	$48
	.byte	$70
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$38
	.byte	$10
	.byte	$38
	.byte	$44
	.byte	$38
	.byte	$10
	.byte	$38
	.byte	$00
	.byte	$30
	.byte	$48
	.byte	$48
	.byte	$78
	.byte	$48
	.byte	$48
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$38
	.byte	$44
	.byte	$44
	.byte	$28
	.byte	$28
	.byte	$6C
	.byte	$00
	.byte	$30
	.byte	$40
	.byte	$20
	.byte	$10
	.byte	$38
	.byte	$48
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$28
	.byte	$54
	.byte	$54
	.byte	$28
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$38
	.byte	$54
	.byte	$54
	.byte	$38
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$38
	.byte	$40
	.byte	$78
	.byte	$40
	.byte	$38
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$48
	.byte	$48
	.byte	$48
	.byte	$48
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$78
	.byte	$00
	.byte	$78
	.byte	$00
	.byte	$78
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$38
	.byte	$10
	.byte	$00
	.byte	$38
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$30
	.byte	$08
	.byte	$30
	.byte	$40
	.byte	$00
	.byte	$78
	.byte	$00
	.byte	$08
	.byte	$30
	.byte	$40
	.byte	$30
	.byte	$08
	.byte	$00
	.byte	$78
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$14
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$50
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$7C
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$48
	.byte	$48
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1C
	.byte	$10
	.byte	$10
	.byte	$50
	.byte	$50
	.byte	$20
	.byte	$00
	.byte	$50
	.byte	$28
	.byte	$28
	.byte	$28
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$60
	.byte	$10
	.byte	$20
	.byte	$70
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$78
	.byte	$78
	.byte	$78
	.byte	$78
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_IRQCounter:
	.dword	$00000000
_publicVDPIe:
	.byte	$01
_CurrentMode:
	.byte	$00
_VDPnameTableAddress:
	.word	$1800
_VDPspriteAttributeAddress:
	.word	$1C00
_VDPpaterGeneratorAddress:
	.word	$2000
_VDPcolorTableAddress:
	.word	$0000
_VDPspriteGeneratorAddress:
	.word	$3800
_SCREEN_WIDTH_CHAR:
	.byte	$00
_shifted:
	.byte	$00
_relesed:
	.byte	$00
_KeyBufferCounter:
	.byte	$00
_n:
	.byte	$00
___TimeCunterCursor:
	.byte	$00
___TimeCunter:
	.byte	$00
___deltaTimeStamp:
	.byte	$00
_publicunixTimestamp:
	.dword	$00000000
___CursorState:
	.byte	$00
_KeyBuffer:
	.byte	$00
	.res	255,$00
_userInput:
	.byte	$01
_carc:
	.byte	$00
_b:
	.word	$0000
_i:
	.word	$0000
_d:
	.byte	$00
_InputKeyBufferPointer:
	.byte	$00
_z:
	.word	$0000
_karnelX:
	.word	$0000
_karnelY:
	.word	$0000
_OldKeyBufferCounter:
	.byte	$00

.segment	"RODATA"

_VDPreg2AddNum:
	.byte	$06
_VDPreg3AddNum:
	.byte	$7F
_VDPreg4AddNum:
	.byte	$07
_VDPreg5AddNum:
	.byte	$38
_VDPreg6AddNum:
	.byte	$07
_transperent:
	.byte	$00
_black:
	.byte	$01
_mediumGreen:
	.byte	$02
_lightGreen:
	.byte	$03
_darkBlue:
	.byte	$04
_lightBlue:
	.byte	$05
_darkRed:
	.byte	$06
_cyan:
	.byte	$07
_mediumRed:
	.byte	$08
_lightRed:
	.byte	$09
_darkYellow:
	.byte	$0A
_lightYellow:
	.byte	$0B
_darkGreen:
	.byte	$0C
_magenta:
	.byte	$0D
_gray:
	.byte	$0E
_white:
	.byte	$0F
_charGraphMode1:
	.word	$0000
_charGraphMode2:
	.word	$0001
_multicolorMode:
	.word	$0002
_textMode:
	.word	$0003
_shiftCodeLeft:
	.byte	$12
_shiftCodeRight:
	.byte	$59
_releseCode:
	.byte	$F0
_ACIA_data:
	.word	$0460
_ACIA_stat:
	.word	$0461
_ACIA_cmd:
	.word	$0462
_ACIA_ctrl:
	.word	$0463
_TknErr:
	.byte	$00
_TknDir:
	.byte	$01
_TknPwd:
	.byte	$02
_TknRoot:
	.byte	$03
_TknCd:
	.byte	$04
_TknMkDir:
	.byte	$05
_TknMkFile:
	.byte	$06
_TknFromat:
	.byte	$07
_TknCls:
	.byte	$08
_TknTstEx:
	.byte	$09
S002C:
	.byte	$45,$72,$72,$6F,$72,$20,$6C,$6F,$61,$64,$69,$6E,$67,$20,$66,$72
	.byte	$6F,$6D,$6E,$20,$66,$6C,$6F,$70,$70,$79,$21,$00
S0034:
	.byte	$54,$65,$73,$74,$69,$6E,$67,$20,$62,$61,$6E,$6B,$20,$20,$20,$20
	.byte	$20,$20,$20,$20,$20,$20,$20,$20,$00
S0031:
	.byte	$45,$72,$72,$6F,$72,$20,$6D,$61,$6B,$69,$6E,$67,$20,$64,$69,$72
	.byte	$65,$63,$74,$6F,$72,$79,$00
S0038:
	.byte	$41,$6C,$6C,$20,$64,$61,$74,$61,$20,$69,$73,$20,$64,$65,$6C,$65
	.byte	$74,$65,$64,$21,$00
S0037:
	.byte	$46,$6F,$72,$6D,$61,$74,$20,$63,$6F,$6D,$70,$6C,$65,$74,$65,$64
	.byte	$2E,$2E,$2E,$00
S0033:
	.byte	$45,$72,$72,$6F,$72,$20,$6D,$61,$6B,$69,$6E,$67,$20,$66,$69,$6C
	.byte	$65,$00
S002B:
	.byte	$45,$6E,$74,$72,$79,$20,$6E,$6F,$74,$20,$66,$6F,$75,$6E,$64,$00
S002F:
	.byte	$4E,$6F,$74,$20,$61,$20,$64,$69,$72,$65,$63,$74,$6F,$72,$79,$00
S0020:
	.byte	$53,$49,$5A,$45,$3A,$20,$20,$20,$20,$20,$20,$00
S001D:
	.byte	$53,$63,$72,$6F,$6C,$6C,$2E,$2E,$2E,$00
S0028:
	.byte	$66,$6F,$72,$6D,$61,$74,$59,$65,$73,$00
S0036:
	.byte	$50,$41,$53,$53,$20,$20,$20,$00
S0035:
	.byte	$46,$41,$49,$4C,$20,$20,$20,$00
S0027:
	.byte	$6D,$6B,$66,$69,$6C,$65,$00
S002A:
	.byte	$74,$65,$73,$74,$65,$78,$00
S001E:
	.byte	$72,$6F,$6F,$74,$20,$00
S0026:
	.byte	$6D,$6B,$64,$69,$72,$00
S001F:
	.byte	$3C,$44,$49,$52,$3E,$00
S0018:
	.byte	$45,$72,$72,$6F,$72,$00
S0024:
	.byte	$72,$6F,$6F,$74,$00
S0023:
	.byte	$70,$77,$64,$00
S0029:
	.byte	$63,$6C,$73,$00
S0022	:=	S0026+2
S0025:
	.byte	$63,$64,$00
S002D	:=	S0037+17
S002E	:=	S0037+18
S0032	:=	S0034+23
S0030	:=	S0034+23

.segment	"BSS"

_VbufferPublic:
	.res	6144,$00
_FloppyBuffer:
	.res	512,$00
_FloppyBuffer1:
	.res	512,$00
_blockState:
	.res	360,$00
_StrBuffer:
	.res	32,$00
_InputKeyBuffer:
	.res	41,$00
__FtPtBuffer:
	.res	512,$00
_keyStringTable:
	.res	256,$00
_funcParametar:
	.res	40,$00
_curBlock:
	.res	10,$00

; ---------------------------------------------------------------
; void __near__ VDP_W_BLOCK (void *ptr_ram, unsigned int ptr_Vram, unsigned int len)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_VDP_W_BLOCK: near

.segment	"CODE"

	jsr     pushax
	ldy     #$07
	jsr     pushwysp
	ldy     #$07
	jsr     pushwysp
	ldy     #$05
	jsr     ldaxysp
	jsr     _VDP_W_BLOCK_asm
	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; void __near__ initVDP (unsigned char enable, unsigned char memSize, unsigned char interupt, unsigned char spriteSize, unsigned char spriteMag, unsigned char mode)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_initVDP: near

.segment	"CODE"

	jsr     pusha
	lda     #$00
	jsr     pusha
	ldy     #$01
	lda     (sp),y
	sta     _CurrentMode
	lda     (sp),y
	cmp     #$01
	bne     L000C
	lda     #$20
	sta     _SCREEN_WIDTH_CHAR
	sta     _VDPpaterGeneratorAddress+1
	lda     #$00
	stz     _VDPpaterGeneratorAddress
	jsr     pusha
	lda     #$02
	jsr     _VDP_W_REG
L000C:	lda     #$00
	sta     (sp)
	ldy     #$05
	lda     (sp),y
	cmp     #$01
	bne     L0003
	lda     (sp)
	ora     #$80
	sta     (sp)
L0003:	iny
	lda     (sp),y
	cmp     #$01
	bne     L0004
	lda     (sp)
	ora     #$40
	sta     (sp)
L0004:	ldy     #$04
	lda     (sp),y
	cmp     #$01
	bne     L0005
	cli
	lda     (sp)
	ora     #$20
	bra     L000B
L0005:	lda     (sp)
	and     #$DF
L000B:	sta     (sp)
	ldy     #$01
	lda     (sp),y
	cmp     #$03
	bne     L000E
	lda     #$28
	sta     _SCREEN_WIDTH_CHAR
	lda     (sp)
	ora     #$10
	sta     (sp)
	ldx     #$38
	stz     _VDPpaterGeneratorAddress
	stx     _VDPpaterGeneratorAddress+1
	ldy     #$01
L000E:	lda     (sp),y
	cmp     #$02
	bne     L0008
	lda     (sp)
	ora     #$08
	sta     (sp)
L0008:	ldy     #$03
	lda     (sp),y
	cmp     #$01
	bne     L0009
	lda     (sp)
	ora     #$02
	sta     (sp)
L0009:	dey
	lda     (sp),y
	cmp     #$01
	bne     L000F
	lda     (sp)
	ora     #$01
	sta     (sp)
L000F:	lda     #$01
	jsr     pusha
	tay
	lda     (sp),y
	jsr     _VDP_W_REG
	lda     #$02
	jsr     pusha
	lda     _VDPreg2AddNum
	jsr     _VDP_W_REG
	lda     #$03
	jsr     pusha
	lda     _VDPreg3AddNum
	jsr     _VDP_W_REG
	lda     #$04
	jsr     pusha
	lda     _VDPreg4AddNum
	jsr     _VDP_W_REG
	lda     #$05
	jsr     pusha
	lda     _VDPreg5AddNum
	jsr     _VDP_W_REG
	lda     #$06
	jsr     pusha
	lda     _VDPreg6AddNum
	jsr     _VDP_W_REG
	jmp     incsp7

.endproc

; ---------------------------------------------------------------
; void __near__ colorGraphicsVDP (unsigned char TextColor, unsigned char BackGround)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_colorGraphicsVDP: near

.segment	"CODE"

	jsr     pusha
	jsr     push0
	sei
	jsr     stax0sp
L0002:	jsr     ldax0sp
	cmp     #$00
	txa
	sbc     #$18
	bvc     L0006
	eor     #$80
L0006:	bpl     L0003
	jsr     ldax0sp
	clc
	adc     #<(_VbufferPublic)
	sta     sreg
	txa
	adc     #>(_VbufferPublic)
	sta     sreg+1
	ldy     #$03
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	asl     a
	sta     ptr1
	ldx     #$00
	dey
	lda     (sp),y
	ora     ptr1
	sta     (sreg)
	lda     #$01
	jsr     addeq0sp
	bra     L0002
L0003:	lda     #<(_VbufferPublic)
	ldx     #>(_VbufferPublic)
	jsr     pushax
	lda     _VDPcolorTableAddress
	ldx     _VDPcolorTableAddress+1
	jsr     pushax
	ldx     #$17
	lda     #$FF
	jsr     _VDP_W_BLOCK
	cli
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ colorBorderVDP (unsigned char TextColor, unsigned char BackGround)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_colorBorderVDP: near

.segment	"CODE"

	jsr     pusha
	jsr     push0
	sei
	ldy     #$03
	lda     (sp),y
	asl     a
	asl     a
	asl     a
	asl     a
	sta     (sp),y
	dey
	ora     (sp),y
	sta     (sp),y
	lda     #$07
	jsr     pusha
	ldy     #$03
	lda     (sp),y
	jsr     _VDP_W_REG
	sei
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ printChar (unsigned char x, unsigned char y, unsigned char a)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_printChar: near

.segment	"CODE"

	jsr     pusha
	jsr     push0
	jsr     push0
	sei
	lda     _charGraphMode2
	ldx     _charGraphMode2+1
	cpx     #$00
	jne     L0002
	cmp     _CurrentMode
	jne     L0002
	ldy     #$06
	lda     (sp),y
	jsr     shlax3
	sta     ptr1
	stx     ptr1+1
	dey
	lda     (sp),y
	tax
	clc
	lda     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	jsr     stax0sp
	sei
	ldx     #$00
	txa
	ldy     #$02
	jsr     staxysp
L0003:	ldy     #$03
	lda     (sp),y
	bne     L000C
	dey
	lda     (sp),y
	cmp     #$08
	jeq     L0009
L000C:	sei
	ldy     #$03
	jsr     ldaxysp
	clc
	adc     (sp)
	pha
	txa
	ldy     #$01
	adc     (sp),y
	tax
	pla
	clc
	adc     #<(_VbufferPublic)
	sta     sreg
	txa
	adc     #>(_VbufferPublic)
	sta     sreg+1
	ldx     #$00
	ldy     #$04
	lda     (sp),y
	jsr     shlax3
	sta     ptr1
	stx     ptr1+1
	dey
	jsr     ldaxysp
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	clc
	adc     #>(_font)
	sta     ptr1+1
	ldy     #<(_font)
	lda     (ptr1),y
	sta     (sreg)
	ldy     #$02
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	bra     L0003
L0002:	lda     _textMode
	ldx     _textMode+1
	cpx     #$00
	bne     L0009
	cmp     _CurrentMode
	bne     L0009
	ldy     #$06
	lda     (sp),y
	jsr     pusha0
	ldy     #$07
	lda     (sp),y
	jsr     pusha0
	lda     #$28
	jsr     tosumula0
	jsr     tosaddax
	jsr     stax0sp
	clc
	adc     #<(_VbufferPublic)
	sta     ptr1
	txa
	adc     #>(_VbufferPublic)
	sta     ptr1+1
	ldy     #$04
	lda     (sp),y
	sta     (ptr1)
L0009:	cli
	jmp     incsp7

.endproc

; ---------------------------------------------------------------
; void __near__ printf (unsigned char x, unsigned char y, const char *str)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_printf: near

.segment	"CODE"

	jsr     pushax
	jsr     push0
	sei
	lda     _charGraphMode2
	ldx     _charGraphMode2+1
	cpx     #$00
	bne     L0002
	cmp     _CurrentMode
	bne     L0002
	bra     L0005
L0003:	ldy     #$05
	lda     (sp),y
	jsr     pusha
	ldy     #$05
	lda     (sp),y
	jsr     pusha
	ldy     #$05
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	jsr     _printChar
	ldy     #$05
	lda     (sp),y
	cmp     #$20
	bcc     L0006
	lda     #$00
	sta     (sp),y
	dey
	clc
	ina
	adc     (sp),y
	sta     (sp),y
L0006:	ldy     #$02
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	ldy     #$05
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
L0005:	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	bne     L0003
	bra     L000A
L0002:	lda     _textMode
	ldx     _textMode+1
	cpx     #$00
	bne     L000A
	cmp     _CurrentMode
	bne     L000A
	bra     L000B
L0009:	ldy     #$05
	lda     (sp),y
	jsr     pusha
	ldy     #$05
	lda     (sp),y
	jsr     pusha
	ldy     #$05
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	jsr     _printChar
	ldy     #$05
	lda     (sp),y
	cmp     #$28
	bcc     L000C
	lda     #$00
	sta     (sp),y
	dey
	clc
	ina
	adc     (sp),y
	sta     (sp),y
L000C:	ldy     #$02
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	ldy     #$05
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
L000B:	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	bne     L0009
L000A:	cli
	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; void __near__ scrollScreen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_scrollScreen: near

.segment	"CODE"

	jsr     push0
	lda     _charGraphMode2
	ldx     _charGraphMode2+1
	cpx     #$00
	bne     L0009
	cmp     _CurrentMode
	bne     L0009
	txa
	jsr     stax0sp
L0003:	jsr     ldax0sp
	cmp     #$00
	txa
	sbc     #$18
	bvc     L0007
	eor     #$80
L0007:	asl     a
	lda     #$00
	tax
	bcc     L001B
	jsr     ldax0sp
	clc
	adc     #<(_VbufferPublic)
	sta     sreg
	txa
	adc     #>(_VbufferPublic)
	sta     sreg+1
	clc
	lda     (sp)
	sta     ptr1
	lda     #$01
	tay
	adc     (sp),y
	clc
	adc     #>(_VbufferPublic)
	sta     ptr1+1
	ldy     #<(_VbufferPublic)
	lda     (ptr1),y
	sta     (sreg)
	ldx     #$00
	lda     #$01
	jsr     addeq0sp
	bra     L0003
L001B:	jsr     stax0sp
L0008:	jsr     ldax0sp
	cmp     #$20
	txa
	sbc     #$00
	bvc     L000C
	eor     #$80
L000C:	bpl     L0009
	lda     (sp)
	jsr     pusha
	lda     #$17
	jsr     pusha
	lda     #$20
	jsr     _printChar
	ldx     #$00
	lda     #$01
	jsr     addeq0sp
	bra     L0008
L0009:	lda     _textMode
	ldx     _textMode+1
	cpx     #$00
	bne     L0014
	cmp     _CurrentMode
	bne     L0014
	txa
	jsr     stax0sp
L000E:	jsr     ldax0sp
	cmp     #$C0
	txa
	sbc     #$03
	bvc     L0012
	eor     #$80
L0012:	asl     a
	lda     #$00
	tax
	bcc     L001D
	jsr     ldax0sp
	clc
	adc     #<(_VbufferPublic)
	sta     sreg
	txa
	adc     #>(_VbufferPublic)
	sta     sreg+1
	jsr     ldax0sp
	ldy     #$28
	jsr     incaxy
	sta     ptr1
	txa
	clc
	adc     #>(_VbufferPublic)
	sta     ptr1+1
	ldy     #<(_VbufferPublic)
	lda     (ptr1),y
	sta     (sreg)
	ldx     #$00
	lda     #$01
	jsr     addeq0sp
	bra     L000E
L001D:	jsr     stax0sp
L0013:	jsr     ldax0sp
	cmp     #$28
	txa
	sbc     #$00
	bvc     L0017
	eor     #$80
L0017:	bpl     L0014
	lda     (sp)
	jsr     pusha
	lda     #$17
	jsr     pusha
	lda     #$20
	jsr     _printChar
	ldx     #$00
	lda     #$01
	jsr     addeq0sp
	bra     L0013
L0014:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ updateScreen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updateScreen: near

.segment	"CODE"

	sei
	lda     _charGraphMode2
	ldx     _charGraphMode2+1
	cpx     #$00
	bne     L0002
	cmp     _CurrentMode
	bne     L0002
	lda     #<(_VbufferPublic)
	ldx     #>(_VbufferPublic)
	jsr     pushax
	lda     _VDPpaterGeneratorAddress
	ldx     _VDPpaterGeneratorAddress+1
	jsr     pushax
	ldx     #$18
	lda     #$00
	jsr     _VDP_W_BLOCK
L0002:	lda     _textMode
	ldx     _textMode+1
	cpx     #$00
	bne     L0003
	cmp     _CurrentMode
	bne     L0003
	lda     #<(_VbufferPublic)
	ldx     #>(_VbufferPublic)
	jsr     pushax
	lda     _VDPnameTableAddress
	ldx     _VDPnameTableAddress+1
	jsr     pushax
	ldx     #$03
	lda     #$C0
	jmp     _VDP_W_BLOCK
L0003:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ ACIAinit (unsigned int Baud)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ACIAinit: near

.segment	"CODE"

	jsr     pushax
	lda     #$10
	jsr     pusha
	jsr     decsp1
	ldy     #$03
	lda     (sp),y
	cmp     #$04
	bne     L0019
	dey
	lda     (sp),y
	cmp     #$B0
	beq     L0014
	iny
L0019:	lda     (sp),y
	cmp     #$07
	bne     L001A
	dey
	lda     (sp),y
	cmp     #$08
	bne     L0005
	ina
	bra     L0018
L0005:	iny
L001A:	lda     (sp),y
	cmp     #$0E
	bne     L001B
	dey
	lda     (sp),y
	cmp     #$10
	bne     L0008
	lda     #$0B
	bra     L0018
L0008:	iny
L001B:	lda     (sp),y
	cmp     #$12
	bne     L001C
	dey
	lda     (sp),y
	cmp     #$C0
	bne     L000B
	lda     #$0C
	bra     L0018
L000B:	iny
L001C:	lda     (sp),y
	cmp     #$1C
	bne     L001D
	dey
	lda     (sp),y
	cmp     #$20
	bne     L000E
	lda     #$0D
	bra     L0018
L000E:	iny
L001D:	lda     (sp),y
	cmp     #$25
	bne     L001E
	dey
	lda     (sp),y
	cmp     #$80
	bne     L0011
	lda     #$0E
	bra     L0018
L0011:	iny
L001E:	lda     (sp),y
	cmp     #$4B
	bne     L0014
	dey
	lda     (sp),y
	bne     L0014
	lda     #$0F
L0018:	sta     (sp)
L0014:	lda     (sp)
	ldy     #$01
	ora     (sp),y
	sta     (sp),y
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; int __near__ fix8_mul (int a, int b)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fix8_mul: near

.segment	"CODE"

	jsr     pushax
	ldy     #$03
	jsr     ldaxysp
	jsr     axlong
	jsr     pusheax
	ldy     #$05
	jsr     ldaxysp
	jsr     axlong
	jsr     tosmuleax
	jsr     pusheax
	jsr     ldeax0sp
	txa
	ldx     sreg
	ldy     sreg+1
	cpy     #$80
	jmp     incsp8

.endproc

; ---------------------------------------------------------------
; int __near__ fix8_div (int a, int b)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fix8_div: near

.segment	"CODE"

	jsr     pushax
	ldy     #$03
	jsr     ldaxysp
	jsr     axlong
	jsr     pusheax
	ldy     #$05
	jsr     ldaxysp
	jsr     axlong
	jsr     tosdiveax
	jsr     pusheax
	jsr     ldeax0sp
	txa
	ldx     sreg
	ldy     sreg+1
	cpy     #$80
	jmp     incsp8

.endproc

; ---------------------------------------------------------------
; int __near__ fix8_from_int (int x)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fix8_from_int: near

.segment	"CODE"

	jsr     pushax
	lda     (sp)
	tax
	lda     #$00
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; int __near__ fix8_to_int (int x)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fix8_to_int: near

.segment	"CODE"

	jsr     pushax
	jsr     ldax0sp
	txa
	cpx     #$80
	ldx     #$00
	bcc     L0001
	dex
L0001:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; int __near__ fixedDec_to_int (int fixed)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fixedDec_to_int: near

.segment	"CODE"

	jsr     pushax
	jsr     pushw0sp
	ldx     #$64
	lda     #$00
	jsr     _fix8_mul
	txa
	cpx     #$80
	ldx     #$00
	bcc     L0001
	dex
L0001:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ int_to_string (int num, char *str)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_int_to_string: near

.segment	"CODE"

	jsr     pushax
	jsr     push0
	jsr     decsp6
	ldy     #$0B
	jsr     ldaxysp
	cpx     #$80
	bcc     L0002
	ldy     #$0B
	jsr     ldaxysp
	jsr     negax
	ldy     #$0A
	jsr     staxysp
	ldy     #$07
	jsr     ldaxysp
	clc
	ldy     #$08
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     #$2D
	sta     (ptr1)
	ldy     #$06
	ldx     #$00
	lda     #$01
	jsr     addeqysp
L0002:	ldy     #$0A
	lda     (sp),y
	iny
	ora     (sp),y
	bne     L000D
	ldy     #$07
	jsr     ldaxysp
	clc
	ldy     #$08
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     #$30
	sta     (ptr1)
	ldy     #$06
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	ldy     #$07
	jsr     ldaxysp
	clc
	ldy     #$08
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     #$00
	sta     (ptr1)
	jmp     L000A
L000D:	jsr     ldaxysp
	ldy     #$04
	jsr     staxysp
	ldx     #$00
	txa
	ldy     #$02
	jsr     staxysp
	bra     L0007
L0005:	ldy     #$07
	jsr     pushwysp
	lda     #$0A
	jsr     tosdiva0
	ldy     #$04
	jsr     staxysp
	ldy     #$02
	ldx     #$00
	lda     #$01
	jsr     addeqysp
L0007:	ldy     #$05
	jsr     ldaxysp
	cmp     #$01
	txa
	sbc     #$00
	bvs     L0008
	eor     #$80
L0008:	bmi     L0005
	ldy     #$03
	jsr     ldaxysp
	clc
	ldy     #$06
	adc     (sp),y
	pha
	txa
	iny
	adc     (sp),y
	tax
	pla
	clc
	iny
	adc     (sp),y
	pha
	txa
	iny
	adc     (sp),y
	tax
	pla
	jsr     pushax
	lda     #$00
	tay
	jsr     staspidx
	bra     L000B
L0009:	ldy     #$0D
	jsr     pushwysp
	ldy     #$00
	ldx     #$00
	lda     #$0A
	jsr     tosmoda0
	jsr     stax0sp
	ldy     #$03
	jsr     ldaxysp
	clc
	ldy     #$06
	adc     (sp),y
	pha
	txa
	iny
	adc     (sp),y
	tax
	pla
	jsr     decax1
	clc
	iny
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	jsr     ldax0sp
	ldy     #$30
	jsr     incaxy
	sta     (ptr1)
	ldx     #$00
	lda     #$01
	ldy     #$02
	jsr     subeqysp
	ldy     #$0D
	jsr     pushwysp
	lda     #$0A
	jsr     tosdiva0
	ldy     #$0A
	jsr     staxysp
L000B:	ldy     #$0B
	jsr     ldaxysp
	cmp     #$01
	txa
	sbc     #$00
	bvs     L000C
	eor     #$80
L000C:	bmi     L0009
L000A:	ldy     #$0C
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ printFix (int x, int y, int a)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_printFix: near

.segment	"CODE"

	jsr     pushax
	jsr     decsp7
	ldy     #$06
L0002:	lda     M0001,y
	sta     (sp),y
	dey
	bpl     L0002
	jsr     push0
	ldy     #$0A
	lda     (sp),y
	bpl     L0003
	ldx     #$FF
L0003:	jsr     pushax
	lda     #$04
	jsr     leaa0sp
	jsr     _int_to_string
	bra     L0006
L0004:	ldy     #$0D
	lda     (sp),y
	jsr     pusha
	ldy     #$0C
	lda     (sp),y
	jsr     pusha
	ldy     #$03
	jsr     ldaxysp
	jsr     incax4
	jsr     leaaxsp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	jsr     _printChar
	ldy     #$0D
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	ldx     #$00
	lda     #$01
	jsr     addeq0sp
L0006:	jsr     ldax0sp
	jsr     incax2
	jsr     leaaxsp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	cmp     #$30
	bcc     L000A
	jsr     ldax0sp
	jsr     incax2
	jsr     leaaxsp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	cmp     #$3A
	bcc     L0004
L000A:	ldy     #$0D
	lda     (sp),y
	jsr     pusha
	ldy     #$0C
	lda     (sp),y
	jsr     pusha
	lda     #$2E
	jsr     _printChar
	ldy     #$0D
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	ldy     #$09
	lda     (sp),y
	ldx     #$00
	jsr     _fixedDec_to_int
	jsr     pushax
	lda     #$04
	jsr     leaa0sp
	jsr     _int_to_string
	ldy     #$0D
	lda     (sp),y
	jsr     pusha
	ldy     #$0C
	lda     (sp),y
	jsr     pusha
	lda     #$04
	jsr     leaa0sp
	jsr     _printf
	ldy     #$0F
	jmp     addysp

.segment	"RODATA"

M0001:
	.byte	$00
	.res	6,$00

.endproc

; ---------------------------------------------------------------
; void __near__ printInt (int x, int y, long a)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_printInt: near

.segment	"CODE"

	jsr     pusheax
	ldy     #$18
	jsr     subysp
	ldy     #$17
L0002:	lda     M0001,y
	sta     (sp),y
	dey
	bpl     L0002
	ldy     #$1B
	jsr     pushwysp
	lda     #$02
	jsr     leaa0sp
	jsr     _int_to_string
	ldy     #$1E
	lda     (sp),y
	jsr     pusha
	ldy     #$1D
	lda     (sp),y
	jsr     pusha
	lda     #$02
	jsr     leaa0sp
	jsr     _printf
	ldy     #$20
	jmp     addysp

.segment	"RODATA"

M0001:
	.byte	$00
	.res	23,$00

.endproc

; ---------------------------------------------------------------
; void __near__ putpixel (unsigned char x, unsigned char y)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_putpixel: near

.segment	"CODE"

	jsr     pusha
	ldy     #$01
	ldx     #$00
	lda     (sp),y
	lsr     a
	lsr     a
	lsr     a
	jsr     aslax3
	sta     ptr1
	stx     ptr1+1
	lda     (sp)
	and     #$07
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0002
	inx
L0002:	sta     ptr1
	stx     ptr1+1
	lda     (sp)
	lsr     a
	lsr     a
	lsr     a
	tax
	clc
	lda     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	and     #$07
	tay
	lda     #$80
	ldx     #$00
	jsr     asraxy
	jsr     pusha
	ldy     #$02
	jsr     ldaxysp
	clc
	adc     #<(_VbufferPublic)
	sta     sreg
	txa
	adc     #>(_VbufferPublic)
	sta     sreg+1
	ldy     #$02
	jsr     ldaxysp
	sta     ptr1
	txa
	clc
	adc     #>(_VbufferPublic)
	sta     ptr1+1
	ldy     #<(_VbufferPublic)
	lda     (ptr1),y
	sta     ptr1
	lda     (sp)
	ora     ptr1
	sta     (sreg)
	jmp     incsp5

.endproc

; ---------------------------------------------------------------
; void __near__ drawLine (int x1, int y1, int x2, int y2)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_drawLine: near

.segment	"CODE"

	jsr     pushax
	ldy     #$03
	jsr     ldaxysp
	sec
	ldy     #$06
	sbc     (sp),y
	pha
	txa
	iny
	sbc     (sp),y
	tax
	pla
	jsr     _abs
	jsr     pushax
	ldy     #$03
	jsr     ldaxysp
	sec
	ldy     #$06
	sbc     (sp),y
	pha
	txa
	iny
	sbc     (sp),y
	tax
	pla
	jsr     _abs
	jsr     pushax
	ldy     #$0B
	jsr     ldaxysp
	ldy     #$06
	cmp     (sp),y
	txa
	iny
	sbc     (sp),y
	bvc     L000D
	eor     #$80
L000D:	bpl     L0002
	ldx     #$00
	lda     #$01
	bra     L0003
L0002:	ldx     #$FF
	txa
L0003:	jsr     pushax
	ldy     #$0B
	jsr     ldaxysp
	ldy     #$06
	cmp     (sp),y
	txa
	iny
	sbc     (sp),y
	bvc     L000E
	eor     #$80
L000E:	bpl     L0004
	ldx     #$00
	lda     #$01
	bra     L0005
L0004:	ldx     #$FF
	txa
L0005:	jsr     pushax
	ldy     #$07
	jsr     ldaxysp
	sec
	ldy     #$04
	sbc     (sp),y
	pha
	txa
	iny
	sbc     (sp),y
	tax
	pla
	jsr     pushax
	jsr     decsp2
	bra     L000C
L0006:	ldy     #$12
	lda     (sp),y
	jsr     pusha
	ldy     #$11
	lda     (sp),y
	jsr     _putpixel
	ldy     #$03
	jsr     ldaxysp
	jsr     aslax1
	jsr     stax0sp
	jsr     pushax
	ldy     #$0B
	jsr     ldaxysp
	jsr     negax
	jsr     tosicmp
	bmi     L000B
	beq     L000B
	ldy     #$09
	jsr     ldaxysp
	ldy     #$02
	jsr     subeqysp
	ldy     #$07
	jsr     ldaxysp
	ldy     #$12
	jsr     addeqysp
L000B:	jsr     ldax0sp
	ldy     #$0A
	cmp     (sp),y
	txa
	iny
	sbc     (sp),y
	bvc     L000F
	eor     #$80
L000F:	bpl     L000C
	jsr     ldaxysp
	ldy     #$02
	jsr     addeqysp
	ldy     #$05
	jsr     ldaxysp
	ldy     #$10
	jsr     addeqysp
L000C:	ldy     #$13
	jsr     ldaxysp
	ldy     #$0E
	cmp     (sp),y
	bne     L0006
	txa
	iny
	cmp     (sp),y
	bne     L0006
	ldy     #$11
	jsr     ldaxysp
	ldy     #$0C
	cmp     (sp),y
	bne     L0006
	txa
	iny
	cmp     (sp),y
	jne     L0006
	ldy     #$14
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ drawRectangle (int x0, int y0, int x1, int y1)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_drawRectangle: near

.segment	"CODE"

	jsr     pushax
	ldy     #$09
	jsr     pushwysp
	ldy     #$09
	jsr     pushwysp
	ldy     #$09
	jsr     pushwysp
	ldy     #$0B
	jsr     ldaxysp
	jsr     _drawLine
	ldy     #$09
	jsr     pushwysp
	ldy     #$09
	jsr     pushwysp
	ldy     #$0D
	jsr     pushwysp
	ldy     #$07
	jsr     ldaxysp
	jsr     _drawLine
	ldy     #$09
	jsr     pushwysp
	ldy     #$05
	jsr     pushwysp
	ldy     #$09
	jsr     pushwysp
	ldy     #$07
	jsr     ldaxysp
	jsr     _drawLine
	ldy     #$05
	jsr     pushwysp
	ldy     #$05
	jsr     pushwysp
	ldy     #$09
	jsr     pushwysp
	ldy     #$0B
	jsr     ldaxysp
	jsr     _drawLine
	jmp     incsp8

.endproc

; ---------------------------------------------------------------
; void __near__ darwStaticCube (int x, int y, int size, int offset)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_darwStaticCube: near

.segment	"CODE"

	jsr     pushax
	ldy     #$09
	jsr     pushwysp
	ldy     #$09
	jsr     pushwysp
	ldy     #$05
	jsr     ldaxysp
	clc
	ldy     #$0A
	adc     (sp),y
	pha
	txa
	iny
	adc     (sp),y
	tax
	pla
	jsr     pushax
	ldy     #$0B
	jsr     ldaxysp
	sec
	ldy     #$06
	sbc     (sp),y
	pha
	txa
	iny
	sbc     (sp),y
	tax
	pla
	jsr     _drawLine
	ldy     #$03
	jsr     ldaxysp
	clc
	ldy     #$06
	adc     (sp),y
	pha
	txa
	iny
	adc     (sp),y
	tax
	pla
	jsr     pushax
	ldy     #$05
	jsr     ldaxysp
	clc
	ldy     #$06
	adc     (sp),y
	pha
	txa
	iny
	adc     (sp),y
	tax
	pla
	jsr     pushax
	ldy     #$07
	jsr     ldaxysp
	clc
	ldy     #$0A
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$05
	jsr     ldaxysp
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	jsr     pushax
	ldy     #$09
	jsr     ldaxysp
	clc
	ldy     #$0A
	adc     (sp),y
	pha
	txa
	iny
	adc     (sp),y
	tax
	pla
	sec
	ldy     #$06
	sbc     (sp),y
	pha
	txa
	iny
	sbc     (sp),y
	tax
	pla
	jsr     _drawLine
	ldy     #$09
	jsr     pushwysp
	ldy     #$05
	jsr     ldaxysp
	clc
	ldy     #$06
	adc     (sp),y
	pha
	txa
	iny
	adc     (sp),y
	tax
	pla
	jsr     pushax
	ldy     #$05
	jsr     ldaxysp
	clc
	ldy     #$0A
	adc     (sp),y
	pha
	txa
	iny
	adc     (sp),y
	tax
	pla
	jsr     pushax
	ldy     #$0B
	jsr     ldaxysp
	sec
	ldy     #$06
	sbc     (sp),y
	sta     ptr1
	txa
	iny
	sbc     (sp),y
	sta     ptr1+1
	ldy     #$09
	jsr     ldaxysp
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	jsr     _drawLine
	ldy     #$03
	jsr     ldaxysp
	clc
	ldy     #$06
	adc     (sp),y
	pha
	txa
	iny
	adc     (sp),y
	tax
	pla
	jsr     pushax
	ldy     #$09
	jsr     pushwysp
	ldy     #$07
	jsr     ldaxysp
	clc
	ldy     #$0A
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$05
	jsr     ldaxysp
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	jsr     pushax
	ldy     #$0B
	jsr     ldaxysp
	sec
	ldy     #$06
	sbc     (sp),y
	pha
	txa
	iny
	sbc     (sp),y
	tax
	pla
	jsr     _drawLine
	ldy     #$09
	jsr     pushwysp
	ldy     #$09
	jsr     pushwysp
	ldy     #$07
	jsr     ldaxysp
	clc
	ldy     #$0A
	adc     (sp),y
	pha
	txa
	iny
	adc     (sp),y
	tax
	pla
	jsr     pushax
	ldy     #$09
	jsr     ldaxysp
	clc
	ldy     #$0A
	adc     (sp),y
	pha
	txa
	iny
	adc     (sp),y
	tax
	pla
	jsr     _drawRectangle
	jsr     ldax0sp
	clc
	ldy     #$06
	adc     (sp),y
	pha
	txa
	iny
	adc     (sp),y
	tax
	pla
	jsr     pushax
	ldy     #$07
	jsr     ldaxysp
	sec
	ldy     #$02
	sbc     (sp),y
	pha
	txa
	iny
	sbc     (sp),y
	tax
	pla
	jsr     pushax
	ldy     #$07
	jsr     ldaxysp
	clc
	ldy     #$0A
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	ldy     #$05
	jsr     ldaxysp
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	jsr     pushax
	ldy     #$09
	jsr     ldaxysp
	clc
	ldy     #$0A
	adc     (sp),y
	pha
	txa
	iny
	adc     (sp),y
	tax
	pla
	sec
	ldy     #$06
	sbc     (sp),y
	pha
	txa
	iny
	sbc     (sp),y
	tax
	pla
	jsr     _drawRectangle
	jmp     incsp8

.endproc

; ---------------------------------------------------------------
; void __near__ initIO (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_initIO: near

.segment	"CODE"

	jsr     decsp4
	ldx     #$00
	lda     #$0C
	jsr     stax0sp
	jsr     _EMem_int
	jsr     _setIrqErs
	lda     #$01
	jsr     pusha
	jsr     pusha
	jsr     pusha
	jsr     pusha
	jsr     pusha
	lda     _textMode
	jsr     _initVDP
	cli
	ldx     #$00
	txa
	ldy     #$02
	jsr     staxysp
L0002:	ldy     #$03
	lda     (sp),y
	cmp     #$40
	bne     L0018
	dey
	lda     (sp),y
	beq     L0003
L0018:	ldy     #$05
	jsr     pushwysp
	lda     #$00
	jsr     _VDP_W_VRAM
	ldy     #$02
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	bra     L0002
L0003:	tax
	jsr     staxysp
L0007:	ldy     #$03
	lda     (sp),y
	cmp     #$08
	bne     L0019
	dey
	lda     (sp),y
	beq     L0008
	iny
L0019:	jsr     ldaxysp
	clc
	adc     #<(_VbufferPublic)
	sta     sreg
	txa
	adc     #>(_VbufferPublic)
	sta     sreg+1
	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	txa
	clc
	adc     #>(_font)
	sta     ptr1+1
	ldy     #<(_font)
	lda     (ptr1),y
	sta     (sreg)
	ldy     #$02
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	bra     L0007
L0008:	lda     #<(_VbufferPublic)
	ldx     #>(_VbufferPublic)
	jsr     pushax
	lda     _VDPpaterGeneratorAddress
	ldx     _VDPpaterGeneratorAddress+1
	jsr     pushax
	ldx     #$08
	lda     #$00
	jsr     _VDP_W_BLOCK
	cli
	lda     _darkBlue
	jsr     pusha
	lda     _white
	jsr     _colorBorderVDP
	ldx     #$00
	txa
	ldy     #$02
	jsr     staxysp
L000C:	ldy     #$03
	jsr     ldaxysp
	cmp     #$18
	txa
	sbc     #$00
	bvc     L0010
	eor     #$80
L0010:	bpl     L000D
	stz     _n
L0015:	lda     _n
	cmp     #$28
	bcs     L000E
	jsr     pusha
	ldy     #$03
	lda     (sp),y
	jsr     pusha
	lda     #$20
	jsr     _printChar
	inc     _n
	bra     L0015
L000E:	ldy     #$02
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	bra     L000C
L000D:	jsr     _updateScreen
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ updateTimeStamp (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updateTimeStamp: near

.segment	"CODE"

	ldx     #$00
	lda     ___deltaTimeStamp
	jsr     axulong
	ldy     #<(_publicunixTimestamp)
	sty     ptr1
	ldy     #>(_publicunixTimestamp)
	jsr     laddeq
	stz     ___deltaTimeStamp
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ interupt (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_interupt: near

.segment	"CODE"

	jsr     decsp1
	jsr     _getKeyCode
	jsr     pusha
	jsr     _isVDPIRQ
	cmp     #$01
	bne     L0002
	inc     ___TimeCunter
	inc     ___TimeCunterCursor
	lda     ___TimeCunter
	cmp     #$32
	bne     L0018
	stz     ___TimeCunter
	inc     ___deltaTimeStamp
L0018:	lda     ___TimeCunterCursor
	cmp     #$10
	jne     L0001
	lda     ___CursorState
	jsr     bnega
	sta     ___CursorState
	and     #$01
	sta     ___CursorState
	stz     ___TimeCunterCursor
	jmp     incsp2
L0002:	lda     (sp)
	cmp     _shiftCodeLeft
	beq     L0019
	cmp     _shiftCodeRight
	bne     L001E
L0019:	lda     _relesed
	bne     L001E
	ina
	sta     _shifted
	bra     L0016
L001E:	lda     (sp)
	cmp     _releseCode
	bne     L001F
	lda     #$01
	sta     _relesed
	bra     L0016
L001F:	lda     _relesed
	cmp     #$01
	bne     L0026
	lda     (sp)
	cmp     _shiftCodeLeft
	beq     L0025
	cmp     _shiftCodeRight
	bne     L0026
L0025:	stz     _shifted
	stz     _relesed
	bra     L0016
L0026:	lda     _relesed
	beq     L0027
	stz     _relesed
	bra     L0016
L0027:	lda     _shifted
	cmp     #$01
	bne     L0029
	lda     (sp)
	jsr     _getKeyMapShifted
	bra     L002A
L0029:	lda     (sp)
	jsr     _getKeyMap
L002A:	ldy     #$01
	sta     (sp),y
	inc     _KeyBufferCounter
	lda     (sp),y
	ldy     _KeyBufferCounter
	sta     _KeyBuffer,y
L0016:	cli
L0001:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ FloppySendBlock (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_FloppySendBlock: near

.segment	"CODE"

	jsr     push0
	jsr     push0
	jsr     pusha
	jsr     _FloppySetSendSerial
	jsr     _waite
	lda     #$69
	jsr     _FloppySendSerial
	bra     L0004
L0002:	ldy     #$02
	jsr     ldaxysp
	sta     ptr1
	txa
	clc
	adc     #>(_FloppyBuffer)
	sta     ptr1+1
	ldy     #<(_FloppyBuffer)
	lda     (ptr1),y
	clc
	adc     (sp)
	sta     (sp)
	ldy     #$01
	ldx     #$00
	tya
	jsr     addeqysp
L0004:	ldy     #$02
	jsr     ldaxysp
	cmp     #$00
	txa
	sbc     #$02
	bvc     L0005
	eor     #$80
L0005:	bmi     L0002
	ldx     #$00
	txa
	ldy     #$03
	jsr     staxysp
	bra     L0008
L0006:	ldy     #$04
	jsr     ldaxysp
	sta     ptr1
	txa
	clc
	adc     #>(_FloppyBuffer)
	sta     ptr1+1
	ldy     #<(_FloppyBuffer)
	lda     (ptr1),y
	jsr     _FloppySendSerial
	ldy     #$03
	ldx     #$00
	lda     #$01
	jsr     addeqysp
L0008:	ldy     #$04
	jsr     ldaxysp
	cmp     #$00
	txa
	sbc     #$02
	bvc     L0009
	eor     #$80
L0009:	asl     a
	lda     #$00
	tax
	rol     a
	bne     L0006
	jsr     _waite
	lda     (sp)
	jsr     _FloppySendSerial
	jmp     incsp5

.endproc

; ---------------------------------------------------------------
; void __near__ FloppyReceveBlock (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_FloppyReceveBlock: near

.segment	"CODE"

	jsr     push0
	jsr     pusha
	jsr     pusha
	jsr     pusha
	jsr     pusha
	jsr     push0
	jsr     push0
	jsr     _FloppySetReceveSerial
	bra     L0004
L0002:	jsr     _FloppySetSendSerial
	lda     #$90
	jsr     _FloppySendSerial
	jsr     _waite
	jsr     _waite
	jsr     _FloppySetReceveSerial
	jsr     _waite
	jsr     _waite
	jsr     _FloppyReceveSerial
	ldy     #$04
	sta     (sp),y
L0004:	ldy     #$04
	ldx     #$00
	lda     (sp),y
	cmp     #$95
	bne     L0002
	jsr     _FloppySetReceveSerial
	jsr     _waite
	jsr     _FloppyReceveSerial
	sta     _FloppyBuffer
	ldx     #$00
	txa
	ldy     #$08
	jsr     staxysp
	bra     L0007
L0005:	ldy     #$09
	jsr     ldaxysp
	clc
	adc     #<(_FloppyBuffer)
	tay
	txa
	adc     #>(_FloppyBuffer)
	tax
	tya
	jsr     pushax
	jsr     _FloppyReceveSerial
	ldy     #$00
	jsr     staspidx
	ldy     #$09
	jsr     ldaxysp
	clc
	adc     #<(_FloppyBuffer1)
	sta     ptr2
	txa
	adc     #>(_FloppyBuffer1)
	sta     ptr2+1
	ldy     #$09
	jsr     ldaxysp
	sta     ptr1
	txa
	clc
	adc     #>(_FloppyBuffer)
	sta     ptr1+1
	ldy     #<(_FloppyBuffer)
	lda     (ptr1),y
	sta     (ptr2)
	ldy     #$08
	ldx     #$00
	lda     #$01
	jsr     addeqysp
L0007:	ldy     #$09
	jsr     ldaxysp
	cmp     #$00
	txa
	sbc     #$02
	bvc     L0008
	eor     #$80
L0008:	asl     a
	lda     #$00
	tax
	rol     a
	bne     L0005
	jsr     _waite
	jsr     _FloppyReceveSerial
	ldy     #$05
	sta     (sp),y
	ldx     #$00
	txa
	ldy     #$08
	jsr     staxysp
	ldy     #$06
	sta     (sp),y
	bra     L000B
L0009:	iny
L000F:	jsr     ldaxysp
	sta     ptr1
	txa
	clc
	adc     #>(_FloppyBuffer)
	sta     ptr1+1
	ldy     #<(_FloppyBuffer)
	lda     (ptr1),y
	ldy     #$06
	clc
	adc     (sp),y
	sta     (sp),y
	ldy     #$08
	ldx     #$00
	lda     #$01
	jsr     addeqysp
L000B:	ldy     #$09
	lda     (sp),y
	cmp     #$02
	bne     L000F
	dey
	lda     (sp),y
	bne     L0009
	ldy     #$06
	lda     (sp),y
	dey
	cmp     (sp),y
	ldy     #$0A
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ FloppySendCommand (char cmmNum, char parameter0, char parameter1, char parameter2)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_FloppySendCommand: near

.segment	"CODE"

	jsr     pusha
	lda     #$00
	jsr     pusha
	sei
	jsr     _FloppySetSendSerial
	bra     L0004
L0002:	jsr     _FloppySetSendSerial
	jsr     _waite
	lda     #$79
	jsr     _FloppySendSerial
	jsr     _waite
	jsr     _FloppySetReceveSerial
	jsr     _waite
	jsr     _FloppyReceveSerial
	sta     (sp)
	jsr     _waite
L0004:	ldx     #$00
	lda     (sp)
	cmp     #$89
	bne     L0002
	jsr     _FloppySetSendSerial
	jsr     _waite
	ldy     #$04
	lda     (sp),y
	jsr     _FloppySendSerial
	jsr     _waite
	ldy     #$03
	lda     (sp),y
	jsr     _FloppySendSerial
	jsr     _waite
	ldy     #$02
	lda     (sp),y
	jsr     _FloppySendSerial
	jsr     _waite
	ldy     #$01
	lda     (sp),y
	jsr     _FloppySendSerial
	jmp     incsp5

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ FloppySaveSector (char side, char track, char sector)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_FloppySaveSector: near

.segment	"CODE"

	jsr     pusha
	lda     #$00
	jsr     pusha
	jsr     pusha
	sei
	jsr     _waite
	jsr     _waite
	jsr     _waite
	jsr     _waite
	lda     #$80
	jsr     pusha
	ldy     #$05
	lda     (sp),y
	jsr     pusha
	ldy     #$05
	lda     (sp),y
	jsr     pusha
	ldy     #$05
	lda     (sp),y
	jsr     _FloppySendCommand
	jsr     _FloppySendBlock
	jsr     _FloppySetReceveSerial
	jsr     _waite
	jsr     _waite
	bra     L0004
L0002:	jsr     _FloppySetSendSerial
	lda     #$90
	jsr     _FloppySendSerial
	jsr     _waite
	jsr     _waite
	jsr     _FloppySetReceveSerial
	jsr     _waite
	jsr     _waite
	jsr     _FloppyReceveSerial
	sta     (sp)
L0004:	ldx     #$00
	lda     (sp)
	cmp     #$95
	bne     L0002
	jsr     _FloppyReceveSerial
	ldy     #$01
	sta     (sp),y
	cli
	ldx     #$00
	lda     (sp),y
	jmp     incsp5

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ FloppyLoadSector (char side, char track, char sector)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_FloppyLoadSector: near

.segment	"CODE"

	jsr     pusha
	lda     #$00
	jsr     pusha
	jsr     pusha
	jsr     _waite
	jsr     _waite
	jsr     _waite
	jsr     _waite
	lda     #$81
	jsr     pusha
	ldy     #$05
	lda     (sp),y
	jsr     pusha
	ldy     #$05
	lda     (sp),y
	jsr     pusha
	ldy     #$05
	lda     (sp),y
	jsr     _FloppySendCommand
	jsr     _FloppyReceveBlock
	jsr     _FloppySetReceveSerial
	jsr     _waite
	jsr     _waite
	bra     L0004
L0002:	jsr     _FloppySetSendSerial
	lda     #$B0
	jsr     _FloppySendSerial
	jsr     _waite
	jsr     _waite
	jsr     _FloppySetReceveSerial
	jsr     _waite
	jsr     _waite
	jsr     _FloppyReceveSerial
	sta     (sp)
L0004:	ldx     #$00
	lda     (sp)
	cmp     #$B5
	bne     L0002
	jsr     _FloppyReceveSerial
	ldy     #$01
	sta     (sp),y
	cli
	ldx     #$00
	lda     (sp),y
	jmp     incsp5

.endproc

; ---------------------------------------------------------------
; void __near__ FloppyMotorOn (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_FloppyMotorOn: near

.segment	"CODE"

	lda     #$00
	jsr     pusha
	jsr     pusha
	lda     #$82
	jsr     pusha
	lda     #$00
	jsr     pusha
	jsr     pusha
	jsr     _FloppySendCommand
	jsr     _waite
	jsr     _waite
	jsr     _waite
	jsr     _waite
	jsr     _waite
	bra     L0006
L0002:	jsr     _FloppySetSendSerial
	jsr     _waite
	lda     #$B0
	jsr     _FloppySendSerial
	jsr     _waite
	jsr     _FloppySetReceveSerial
	jsr     _waite
	jsr     _FloppyReceveSerial
	sta     (sp)
L0006:	jsr     _waite
	ldx     #$00
	lda     (sp)
	cmp     #$B5
	bne     L0002
	jsr     _waite
	jsr     _FloppyReceveSerial
	ldy     #$01
	sta     (sp),y
	jsr     _waite
	ldy     #$01
	lda     (sp),y
	beq     L0005
	lda     #$00
	jsr     pusha
	jsr     pusha
	lda     #<(S0018)
	ldx     #>(S0018)
	jsr     _printf
	jsr     push0
	lda     #$08
	jsr     pusha0
	ldy     #$05
	lda     (sp),y
	jsr     axulong
	jsr     _printInt
	lda     #<(_VbufferPublic)
	ldx     #>(_VbufferPublic)
	jsr     pushax
	lda     _VDPpaterGeneratorAddress
	ldx     _VDPpaterGeneratorAddress+1
	jsr     pushax
	ldx     #$18
	lda     #$00
	jsr     _VDP_W_BLOCK
L0005:	cli
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ FloppyHaveDisk (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_FloppyHaveDisk: near

.segment	"CODE"

	lda     #$00
	jsr     pusha
	jsr     pusha
	lda     #$83
	jsr     pusha
	lda     #$00
	jsr     pusha
	jsr     pusha
	jsr     _FloppySendCommand
	bra     L0004
L0002:	jsr     _FloppySetSendSerial
	jsr     _waite
	lda     #$B0
	jsr     _FloppySendSerial
	jsr     _waite
	jsr     _FloppySetReceveSerial
	jsr     _waite
	jsr     _FloppyReceveSerial
	sta     (sp)
	jsr     _waite
L0004:	ldx     #$00
	lda     (sp)
	cmp     #$B5
	bne     L0002
	jsr     _waite
	jsr     _FloppyReceveSerial
	ldy     #$01
	sta     (sp),y
	jsr     _waite
	cli
	ldy     #$01
	ldx     #$00
	lda     (sp),y
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ FloppyMotorOff (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_FloppyMotorOff: near

.segment	"CODE"

	lda     #$00
	jsr     pusha
	jsr     pusha
	lda     #$84
	jsr     pusha
	lda     #$00
	jsr     pusha
	jsr     pusha
	jsr     _FloppySendCommand
	bra     L0004
L0002:	jsr     _FloppySetSendSerial
	jsr     _waite
	lda     #$B0
	jsr     _FloppySendSerial
	jsr     _waite
	jsr     _FloppySetReceveSerial
	jsr     _waite
	jsr     _FloppyReceveSerial
	sta     (sp)
	jsr     _waite
L0004:	ldx     #$00
	lda     (sp)
	cmp     #$B5
	bne     L0002
	jsr     _waite
	jsr     _FloppyReceveSerial
	ldy     #$01
	sta     (sp),y
	jsr     _waite
	cli
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ FloppyMotorRunning (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_FloppyMotorRunning: near

.segment	"CODE"

	lda     #$00
	jsr     pusha
	jsr     pusha
	lda     #$85
	jsr     pusha
	lda     #$00
	jsr     pusha
	jsr     pusha
	jsr     _FloppySendCommand
	bra     L0004
L0002:	jsr     _FloppySetSendSerial
	jsr     _waite
	lda     #$B0
	jsr     _FloppySendSerial
	jsr     _waite
	jsr     _FloppySetReceveSerial
	jsr     _waite
	jsr     _FloppyReceveSerial
	sta     (sp)
	jsr     _waite
L0004:	ldx     #$00
	lda     (sp)
	cmp     #$B5
	bne     L0002
	jsr     _waite
	jsr     _FloppyReceveSerial
	ldy     #$01
	sta     (sp),y
	jsr     _waite
	cli
	ldy     #$01
	ldx     #$00
	lda     (sp),y
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ floppyEncodeBlock (unsigned char side, unsigned char track, unsigned char block)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_floppyEncodeBlock: near

.segment	"CODE"

	jsr     pusha
	ldy     #$02
	lda     (sp),y
	jsr     pusha0
	ldx     #$05
	lda     #$A0
	jsr     tosmulax
	jsr     pushax
	ldy     #$03
	lda     (sp),y
	jsr     pusha0
	lda     #$12
	jsr     tosumula0
	sta     ptr1
	stx     ptr1+1
	ldy     #$02
	lda     (sp),y
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0002
	inx
L0002:	jsr     tosaddax
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ floppyDecodeBlock (unsigned int floppyEncodeBlock)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_floppyDecodeBlock: near

.segment	"CODE"

	jsr     pushax
	jsr     ldax0sp
	jsr     decax1
	jsr     pushax
	ldx     #$05
	lda     #$A0
	jsr     tosudivax
	jsr     pusha
	ldy     #$04
	jsr     pushwysp
	ldy     #$02
	lda     (sp),y
	jsr     pusha0
	ldx     #$05
	lda     #$A0
	jsr     tosmulax
	jsr     tossubax
	jsr     pushax
	jsr     ldax0sp
	jsr     decax1
	jsr     pushax
	lda     #$12
	jsr     tosudiva0
	jsr     pusha
	ldy     #$04
	jsr     pushwysp
	ldy     #$02
	lda     (sp),y
	jsr     pusha0
	lda     #$12
	jsr     tosumula0
	jsr     tossubax
	ldx     #$00
	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ floppyDecodeTrack (unsigned int floppyEncodeBlock)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_floppyDecodeTrack: near

.segment	"CODE"

	jsr     pushax
	jsr     ldax0sp
	jsr     decax1
	jsr     pushax
	ldx     #$05
	lda     #$A0
	jsr     tosudivax
	jsr     pusha
	ldy     #$04
	jsr     pushwysp
	ldy     #$02
	lda     (sp),y
	jsr     pusha0
	ldx     #$05
	lda     #$A0
	jsr     tosmulax
	jsr     tossubax
	jsr     pushax
	jsr     ldax0sp
	jsr     decax1
	jsr     pushax
	lda     #$12
	jsr     tosudiva0
	ldx     #$00
	jmp     incsp5

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ floppyDecodeSide (unsigned int floppyEncodeBlock)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_floppyDecodeSide: near

.segment	"CODE"

	jsr     pushax
	jsr     ldax0sp
	jsr     decax1
	jsr     pushax
	ldx     #$05
	lda     #$A0
	jsr     tosudivax
	ldx     #$00
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ floppyChekBlockFree (unsigned int blockNum)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_floppyChekBlockFree: near

.segment	"CODE"

	jsr     pushax
	jsr     push0
	jsr     pusha
	jsr     pusha
	lda     #$01
	ldy     #$04
	jsr     subeqysp
	ldy     #$05
	jsr     ldaxysp
	jsr     shrax3
	ldy     #$02
	jsr     staxysp
	ldy     #$04
	lda     (sp),y
	and     #$07
	tay
	lda     #$01
	ldx     #$00
	jsr     aslaxy
	ldy     #$01
	sta     (sp),y
	lda     #$00
	sta     (sp)
	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	txa
	clc
	adc     #>(_blockState)
	sta     ptr1+1
	ldy     #<(_blockState)
	lda     (ptr1),y
	sta     ptr1
	ldx     #$00
	ldy     #$01
	lda     (sp),y
	and     ptr1
	pha
	pla
	bne     L0002
	tya
	sta     (sp)
L0002:	lda     (sp)
	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; void __near__ floppyMakeBlockFree (unsigned int blockNum)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_floppyMakeBlockFree: near

.segment	"CODE"

	jsr     pushax
	jsr     push0
	jsr     push0
	lda     #$01
	ldy     #$04
	jsr     subeqysp
	ldy     #$05
	jsr     ldaxysp
	jsr     shrax3
	ldy     #$02
	jsr     staxysp
	ldy     #$04
	lda     (sp),y
	and     #$07
	tay
	lda     #$01
	ldx     #$00
	jsr     aslaxy
	jsr     stax0sp
	ldy     #$03
	jsr     ldaxysp
	clc
	adc     #<(_blockState)
	tay
	txa
	adc     #>(_blockState)
	tax
	tya
	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	sta     ptr1
	lda     (sp)
	eor     #$FF
	and     ptr1
	sta     (sreg)
	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; void __near__ floppyMakeBlockOccupide (unsigned int blockNum)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_floppyMakeBlockOccupide: near

.segment	"CODE"

	jsr     pushax
	jsr     push0
	jsr     push0
	lda     #$01
	ldy     #$04
	jsr     subeqysp
	ldy     #$05
	jsr     ldaxysp
	jsr     shrax3
	ldy     #$02
	jsr     staxysp
	ldy     #$04
	lda     (sp),y
	and     #$07
	tay
	lda     #$01
	ldx     #$00
	jsr     aslaxy
	jsr     stax0sp
	ldy     #$03
	jsr     ldaxysp
	clc
	adc     #<(_blockState)
	tay
	txa
	adc     #>(_blockState)
	tax
	tya
	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	sta     ptr1
	lda     (sp)
	ora     ptr1
	sta     (sreg)
	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ floppyLoadBlockState (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_floppyLoadBlockState: near

.segment	"CODE"

	jsr     push0
	jsr     pusha
	jsr     pusha
	lda     #$01
	jsr     _FloppyLoadSector
	jsr     pusha
	jsr     _waite
	jsr     _waite
	jsr     _waite
	jsr     _waite
	ldx     #$00
	txa
	ldy     #$01
	jsr     staxysp
L0002:	ldy     #$02
	jsr     ldaxysp
	cmp     #$68
	txa
	sbc     #$01
	bvc     L0006
	eor     #$80
L0006:	bpl     L0003
	ldy     #$02
	jsr     ldaxysp
	clc
	adc     #<(_blockState)
	sta     sreg
	txa
	adc     #>(_blockState)
	sta     sreg+1
	ldy     #$02
	jsr     ldaxysp
	sta     ptr1
	txa
	clc
	adc     #>(_FloppyBuffer)
	sta     ptr1+1
	ldy     #<(_FloppyBuffer)
	lda     (ptr1),y
	sta     (sreg)
	ldy     #$01
	ldx     #$00
	tya
	jsr     addeqysp
	bra     L0002
L0003:	ldx     #$00
	lda     (sp)
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ floppySaveBlockState (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_floppySaveBlockState: near

.segment	"CODE"

	jsr     push0
	jsr     _waite
	jsr     _waite
	jsr     _waite
	jsr     _waite
	ldx     #$00
	txa
	jsr     stax0sp
L0002:	jsr     ldax0sp
	cmp     #$68
	txa
	sbc     #$01
	bvc     L0006
	eor     #$80
L0006:	asl     a
	lda     #$00
	bcc     L0008
	jsr     ldax0sp
	clc
	adc     #<(_FloppyBuffer)
	sta     sreg
	txa
	adc     #>(_FloppyBuffer)
	sta     sreg+1
	jsr     ldax0sp
	sta     ptr1
	txa
	clc
	adc     #>(_blockState)
	sta     ptr1+1
	ldy     #<(_blockState)
	lda     (ptr1),y
	sta     (sreg)
	ldx     #$00
	lda     #$01
	jsr     addeq0sp
	bra     L0002
L0008:	jsr     pusha
	jsr     pusha
	ina
	jsr     _FloppySaveSector
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; unsigned long __near__ dateToTimestamp (unsigned int minute, unsigned int hour, unsigned int day, unsigned int month, unsigned int year)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_dateToTimestamp: near

.segment	"CODE"

	jsr     pushax
	ldx     #$00
	lda     #$3C
	jsr     push0ax
	ldx     #$0E
	lda     #$10
	jsr     push0ax
	ldx     #$51
	lda     #$01
	sta     sreg
	lda     #$80
	jsr     pusheax
	ldx     #$01
	lda     #$6D
	jsr     push0ax
	jsr     pushl0
	jsr     pushl0
	jsr     push0
	ldy     #$18
	jsr     subysp
	ldy     #$17
L0002:	lda     M0001,y
	sta     (sp),y
	dey
	bpl     L0002
	ldy     #$32
	lda     (sp),y
	and     #$03
	bne     L001E
	ldy     #$35
	jsr     pushwysp
	lda     #$64
	jsr     tosumoda0
	cpx     #$00
	bne     L0009
	cmp     #$00
	bne     L002B
L001E:	ldy     #$35
	jsr     pushwysp
	ldx     #$01
	lda     #$90
	jsr     tosumodax
	cpx     #$00
	bne     L0003
	cmp     #$00
	beq     L002B
	bra     L0003
L0009:	ldx     #$00
L002B:	lda     #$1D
	ldy     #$02
	jsr     staxysp
L0003:	ldx     #$07
	lda     #$B2
	ldy     #$18
	jsr     staxysp
L000C:	ldy     #$19
	jsr     ldaxysp
	ldy     #$32
	cmp     (sp),y
	txa
	iny
	sbc     (sp),y
	bcs     L000D
	ldy     #$18
	lda     (sp),y
	and     #$03
	bne     L001F
	ldy     #$1B
	jsr     pushwysp
	lda     #$64
	jsr     tosumoda0
	cpx     #$00
	bne     L0027
	cmp     #$00
	bne     L0027
L001F:	ldy     #$1B
	jsr     pushwysp
	ldx     #$01
	lda     #$90
	jsr     tosumodax
	cpx     #$00
	bne     L0010
	cmp     #$00
	bne     L0010
L0027:	ldx     #$01
	stz     sreg
	stz     sreg+1
	lda     #$6E
	bra     L002A
L0010:	ldx     #$01
	stz     sreg
	stz     sreg+1
	lda     #$6D
L002A:	ldy     #$1A
	jsr     laddeqysp
	ldy     #$18
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	bra     L000C
L000D:	ldx     #$00
	lda     #$01
	ldy     #$18
	jsr     staxysp
L001A:	ldy     #$19
	jsr     ldaxysp
	ldy     #$34
	cmp     (sp),y
	txa
	iny
	sbc     (sp),y
	bcs     L001B
	ldy     #$19
	jsr     ldaxysp
	jsr     decax1
	jsr     aslax1
	jsr     leaaxsp
	jsr     ldaxi
	jsr     axulong
	ldy     #$1A
	jsr     laddeqysp
	ldy     #$18
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	bra     L001A
L001B:	ldy     #$37
	jsr     ldaxysp
	jsr     decax1
	jsr     axulong
	ldy     #$1A
	jsr     laddeqysp
	ldy     #$1D
	jsr     ldeaxysp
	jsr     pusheax
	ldy     #$2D
	jsr     ldeaxysp
	jsr     tosumuleax
	jsr     pusheax
	ldy     #$3F
	jsr     pushwysp
	ldy     #$33
	jsr     ldeaxysp
	jsr     tosulong
	jsr     tosumuleax
	jsr     tosaddeax
	jsr     pusheax
	ldy     #$41
	jsr     pushwysp
	ldy     #$37
	jsr     ldeaxysp
	jsr     tosulong
	jsr     tosumuleax
	jsr     tosaddeax
	ldy     #$1E
	jsr     steaxysp
	ldy     #$21
	jsr     ldeaxysp
	ldy     #$3C
	jmp     addysp

.segment	"RODATA"

M0001:
	.word	$001F
	.word	$001C
	.word	$001F
	.word	$001E
	.word	$001F
	.word	$001E
	.word	$001F
	.word	$001F
	.word	$001E
	.word	$001F
	.word	$001E
	.word	$001F

.endproc

; ---------------------------------------------------------------
; void __near__ timestampToDate (unsigned long unixTimestamp, unsigned int *year, unsigned char *month, unsigned char *day, unsigned char *hour, unsigned char *minute)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_timestampToDate: near

.segment	"CODE"

	jsr     pushax
	lda     #$3C
	jsr     pusha
	ldx     #$0E
	lda     #$10
	jsr     pushax
	ldx     #$51
	lda     #$01
	sta     sreg
	stz     sreg+1
	lda     #$80
	jsr     pusheax
	ldx     #$01
	lda     #$6D
	jsr     pushax
	ldy     #$1A
	jsr     subysp
	lda     #$00
	jsr     pusha
	ldy     #$31
	jsr     ldeaxysp
	jsr     pusheax
	ldy     #$27
	ldx     #$00
	lda     (sp),y
	jsr     axulong
	jsr     tosudiveax
	ldy     #$17
	jsr     steaxysp
	ldy     #$1A
	jsr     ldeaxysp
	jsr     pusheax
	ldx     #$00
	lda     #$3C
	jsr     tosudiv0ax
	ldy     #$13
	jsr     steaxysp
	ldy     #$16
	jsr     ldeaxysp
	jsr     pusheax
	ldx     #$00
	lda     #$18
	jsr     tosudiv0ax
	ldy     #$0F
	jsr     steaxysp
	ldy     #$2D
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     #$B2
	sta     (ptr1)
	ldy     #$01
	lda     #$07
	sta     (ptr1),y
	bra     L0004
L0002:	ldy     #$2D
	jsr     ldaxysp
	jsr     ldaxi
	and     #$03
	bne     L0024
	ldy     #$2D
	jsr     ldaxysp
	jsr     pushw
	lda     #$64
	jsr     tosumoda0
	cpx     #$00
	bne     L002A
	cmp     #$00
	bne     L002A
L0024:	ldy     #$2D
	jsr     ldaxysp
	jsr     pushw
	ldx     #$01
	lda     #$90
	jsr     tosumodax
	cpx     #$00
	bne     L0005
	cmp     #$00
	bne     L0005
L002A:	ldx     #$01
	stz     sreg
	stz     sreg+1
	lda     #$6E
	bra     L0032
L0005:	ldx     #$01
	stz     sreg
	stz     sreg+1
	lda     #$6D
L0032:	ldy     #$0F
	jsr     lsubeqysp
	ldy     #$2D
	jsr     ldaxysp
	sta     sreg
	stx     sreg+1
	jsr     ldaxi
	sta     regsave
	stx     regsave+1
	ina
	bne     L000F
	inx
L000F:	sta     (sreg)
	ldy     #$01
	txa
	sta     (sreg),y
L0004:	ldy     #$12
	jsr     ldeaxysp
	jsr     pusheax
	ldy     #$20
	jsr     ldaxysp
	jsr     axulong
	jsr     tosugeeax
	bne     L0002
	ldy     #$2D
	jsr     ldaxysp
	jsr     ldaxi
	and     #$03
	bne     L0025
	ldy     #$2D
	jsr     ldaxysp
	jsr     pushw
	lda     #$64
	jsr     tosumoda0
	cpx     #$00
	bne     L0015
	cmp     #$00
	bne     L0015
L0025:	ldy     #$2D
	jsr     ldaxysp
	jsr     pushw
	ldx     #$01
	lda     #$90
	jsr     tosumodax
	cpx     #$00
	bne     L0031
	cmp     #$00
	beq     L0015
L0031:	lda     #$00
	bra     L002D
L0015:	lda     #$01
L002D:	ldy     #$0E
	sta     (sp),y
	lda     (sp),y
	beq     L002E
	lda     #$1D
	bra     L002F
L002E:	lda     #$1C
L002F:	dey
	sta     (sp),y
	lda     #$00
L0027:	sta     (sp)
	cmp     #$0C
	bcs     L001B
	lda     #$01
	jsr     leaa0sp
	clc
	adc     (sp)
	bcc     L001E
	inx
L001E:	sta     ptr1
	stx     ptr1+1
	lda     (sp)
	tay
	lda     M0001,y
	sta     (ptr1)
	clc
	lda     #$01
	adc     (sp)
	bra     L0027
L001B:	ldy     #$0D
	lda     (sp),y
	ldy     #$02
	sta     (sp),y
	ldy     #$2B
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     #$01
	sta     (ptr1)
	bra     L0022
L0020:	ldy     #$2B
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1)
	jsr     decax1
	ina
	bne     L0023
	inx
L0023:	jsr     leaaxsp
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1)
	jsr     axulong
	ldy     #$0F
	jsr     lsubeqysp
	ldy     #$2B
	jsr     ldaxysp
	sta     sreg
	stx     sreg+1
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	ina
	sta     (sreg)
L0022:	ldy     #$12
	jsr     ldeaxysp
	jsr     pusheax
	ldy     #$2F
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1)
	jsr     decax1
	jsr     incax5
	jsr     leaaxsp
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     (ptr1)
	jsr     axulong
	jsr     tosugeeax
	bne     L0020
	ldy     #$2B
	jsr     pushwysp
	ldy     #$14
	jsr     ldeaxysp
	ldy     #$01
	jsr     inceaxy
	ldy     #$00
	jsr     staspidx
	ldy     #$29
	jsr     pushwysp
	ldy     #$18
	jsr     ldeaxysp
	jsr     pusheax
	ldx     #$00
	lda     #$18
	jsr     tosumod0ax
	ldy     #$00
	jsr     staspidx
	ldy     #$27
	jsr     pushwysp
	ldy     #$1C
	jsr     ldeaxysp
	jsr     pusheax
	ldx     #$00
	lda     #$3C
	jsr     tosumod0ax
	ldy     #$00
	jsr     staspidx
	lda     #$02
	sta     (sp)
	ldy     #$32
	jmp     addysp

.segment	"RODATA"

M0001:
	.byte	$1F
	.byte	$1C
	.byte	$1F
	.byte	$1E
	.byte	$1F
	.byte	$1E
	.byte	$1F
	.byte	$1F
	.byte	$1E
	.byte	$1F
	.byte	$1E
	.byte	$1F

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ FloppySaveSectorNum (unsigned int SectorNum)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_FloppySaveSectorNum: near

.segment	"CODE"

	jsr     pushax
	jsr     ldax0sp
	jsr     _floppyDecodeSide
	jsr     pushax
	ldy     #$03
	jsr     ldaxysp
	jsr     _floppyDecodeTrack
	jsr     pushax
	ldy     #$05
	jsr     ldaxysp
	jsr     _floppyDecodeBlock
	jsr     pushax
	ldy     #$04
	lda     (sp),y
	jsr     pusha
	ldy     #$03
	lda     (sp),y
	jsr     pusha
	ldy     #$02
	lda     (sp),y
	jsr     _FloppySaveSector
	jmp     incsp8

.endproc

; ---------------------------------------------------------------
; void __near__ karnelPrint (unsigned char *string, unsigned char repeatLine, unsigned char funcPrint)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_karnelPrint: near

.segment	"CODE"

	jsr     pusha
	lda     _karnelX
	jsr     pusha
	lda     _karnelY
	jsr     pusha
	lda     _KeyBufferCounter
	sta     _OldKeyBufferCounter
	lda     _karnelY
	cmp     #$17
	lda     _karnelY+1
	sbc     #$00
	bvs     L0003
	eor     #$80
L0003:	bpl     L0008
	ldy     #$02
	lda     (sp),y
	cmp     #$01
	bne     L0004
	dea
	jsr     pusha
	lda     #$17
	jsr     pusha
	lda     #<(S001D)
	ldx     #>(S001D)
	jsr     _printf
	jsr     _updateScreen
L0021:	lda     _OldKeyBufferCounter
	cmp     _KeyBufferCounter
	beq     L0021
	jsr     _scrollScreen
	jsr     _scrollScreen
	jsr     _scrollScreen
	jsr     _scrollScreen
	jsr     _updateScreen
	lda     #$13
	bra     L0029
L0004:	jsr     _scrollScreen
	lda     #$16
L0029:	sta     _karnelY
	stz     _karnelY+1
	lda     _karnelY
	sta     (sp)
L0008:	ldy     #$02
	lda     (sp),y
	bne     L0009
	jsr     pusha
	lda     _karnelY
	jsr     pusha
	lda     #$3E
	jsr     _printChar
	lda     #$01
	sta     _karnelX
	stz     _karnelX+1
L0009:	lda     _textMode
	ldx     _textMode+1
	cpx     #$00
	bne     L000A
	cmp     _CurrentMode
	bne     L000A
	bra     L0011
L0022:	lda     _karnelX
	jsr     pusha
	lda     _karnelY
	jsr     pusha
	ldy     #$07
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	jsr     _printChar
	lda     _karnelX
	cmp     #$28
	lda     _karnelX+1
	sbc     #$00
	bvs     L000F
	eor     #$80
L000F:	bpl     L0010
	stz     _karnelX
	stz     _karnelX+1
	inc     _karnelY
	bne     L0010
	inc     _karnelY+1
L0010:	ldy     #$04
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	inc     _karnelX
	bne     L0011
	inc     _karnelX+1
L0011:	ldy     #$05
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	bne     L0022
	bra     L0024
L000A:	lda     _charGraphMode2
	ldx     _charGraphMode2+1
	cpx     #$00
	bne     L0024
	cmp     _CurrentMode
	bne     L0024
	bra     L001A
L0023:	lda     _karnelX
	jsr     pusha
	lda     _karnelY
	jsr     pusha
	ldy     #$07
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	jsr     _printChar
	lda     _karnelX
	cmp     #$20
	lda     _karnelX+1
	sbc     #$00
	bvs     L0018
	eor     #$80
L0018:	bpl     L0019
	stz     _karnelX
	stz     _karnelX+1
	inc     _karnelY
	bne     L0019
	inc     _karnelY+1
L0019:	ldy     #$04
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	inc     _karnelX
	bne     L001A
	inc     _karnelX+1
L001A:	ldy     #$05
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	bne     L0023
L0024:	lda     _karnelX
	jsr     pusha
	lda     _karnelY
	jsr     pusha
	lda     #$20
	jsr     _printChar
	ldy     #$03
	lda     (sp),y
	cmp     #$01
	bne     L0025
	tay
	lda     (sp),y
	sta     _karnelX
	stz     _karnelX+1
	lda     (sp)
	sta     _karnelY
	stz     _karnelY+1
	bra     L001D
L0025:	stz     _karnelX
	stz     _karnelX+1
	inc     _karnelY
	bne     L001D
	inc     _karnelY+1
L001D:	jsr     _updateScreen
	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ formatHeader (char *name, unsigned long timeStamp, unsigned char sizeBlocks, unsigned int sizeBytes, unsigned char directory, unsigned char *HeaderBuffer)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_formatHeader: near

.segment	"CODE"

	jsr     pushax
	jsr     push0
	jsr     push0
	jsr     push0
	jsr     push0
	jsr     pusha
	ldy     #$07
	jsr     staxysp
L0002:	ldy     #$08
	jsr     ldaxysp
	cmp     #$00
	txa
	sbc     #$02
	bvc     L0006
	eor     #$80
L0006:	asl     a
	lda     #$00
	tax
	bcc     L0042
	ldy     #$08
	jsr     ldaxysp
	clc
	ldy     #$09
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     #$00
	sta     (ptr1)
	ldy     #$07
	tax
	ina
	jsr     addeqysp
	bra     L0002
L0042:	ldy     #$07
	jsr     staxysp
L0007:	ldy     #$08
	jsr     ldaxysp
	cmp     #$0E
	txa
	sbc     #$00
	bvc     L000B
	eor     #$80
L000B:	bpl     L0008
	lda     (sp)
	bne     L000C
	ldy     #$08
	jsr     ldaxysp
	clc
	ldy     #$13
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     (ptr1)
	cmp     #$20
	bne     L000C
	ldy     #$0B
	lda     (sp),y
	bne     L000C
	tax
	ina
	jmp     L0001
L000C:	ldy     #$08
	jsr     ldaxysp
	clc
	ldy     #$13
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     (ptr1)
	cmp     #$2E
	bne     L0009
	lda     (sp)
	bne     L0009
	ldy     #$0B
	lda     (sp),y
	bne     L0009
	ldy     #$08
	jsr     ldaxysp
	jsr     decax1
	ldy     #$03
	jsr     staxysp
	ldy     #$08
	jsr     ldaxysp
	ina
	bne     L0014
	inx
L0014:	ldy     #$01
	jsr     staxysp
	lda     #$01
	sta     (sp)
L0009:	ldy     #$07
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	jmp     L0007
L0008:	ldy     #$0B
	lda     (sp),y
	cmp     #$01
	bne     L001E
	ldx     #$00
	txa
	ldy     #$03
	jsr     staxysp
	ldy     #$07
	jsr     staxysp
L0016:	ldy     #$08
	jsr     ldaxysp
	cmp     #$0E
	txa
	sbc     #$00
	bvc     L001A
	eor     #$80
L001A:	bpl     L0017
	ldy     #$08
	jsr     ldaxysp
	clc
	ldy     #$13
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     (ptr1)
	cmp     #$20
	beq     L0047
	ldy     #$08
	jsr     ldaxysp
	clc
	ldy     #$13
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     (ptr1)
	cmp     #$0D
	bne     L0018
L0047:	ldy     #$08
	jsr     ldaxysp
	ldy     #$03
	jsr     staxysp
L0018:	ldy     #$07
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	bra     L0016
L0017:	ldy     #$03
	lda     (sp),y
	iny
	ora     (sp),y
	bne     L001E
	tax
	lda     #$03
	jmp     L0001
L001E:	ldy     #$02
	jsr     ldaxysp
	jsr     incax3
	clc
	ldy     #$13
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     (ptr1)
	cmp     #$20
	beq     L0024
	ldy     #$0B
	lda     (sp),y
	bne     L004F
	ldy     #$02
	jsr     ldaxysp
	jsr     incax3
	clc
	ldy     #$13
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     (ptr1)
	cmp     #$0D
	beq     L0024
	ldy     #$0B
	lda     (sp),y
	bne     L004F
	tax
	lda     #$02
	jmp     L0001
L0024:	ldy     #$0B
L004F:	lda     (sp),y
	cmp     #$01
	bne     L004D
	ldx     #$00
	txa
	ldy     #$07
	jsr     staxysp
L0029:	ldy     #$08
	jsr     ldaxysp
	cmp     #$10
	txa
	sbc     #$00
	bvc     L002D
	eor     #$80
L002D:	bpl     L002A
	ldy     #$08
	jsr     ldaxysp
	ldy     #$03
	cmp     (sp),y
	txa
	iny
	sbc     (sp),y
	bvc     L003E
	eor     #$80
L003E:	bpl     L002E
	ldy     #$08
	jsr     ldaxysp
	clc
	ldy     #$09
	adc     (sp),y
	sta     sreg
	txa
	iny
	adc     (sp),y
	sta     sreg+1
	ldy     #$08
	jsr     ldaxysp
	clc
	ldy     #$13
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     (ptr1)
	sta     (sreg)
	bra     L002B
L002E:	ldy     #$08
	jsr     ldaxysp
	clc
	ldy     #$09
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     #$20
	sta     (ptr1)
L002B:	ldy     #$07
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	bra     L0029
L002A:	ldy     #$0B
L004D:	lda     (sp),y
	jne     L0032
	tax
	ldy     #$07
	jsr     staxysp
L0031:	ldy     #$08
	jsr     ldaxysp
	cmp     #$10
	txa
	sbc     #$00
	bvc     L0035
	eor     #$80
L0035:	jpl     L0032
	ldy     #$0A
	jsr     pushwysp
	ldy     #$06
	jsr     ldaxysp
	jsr     tosicmp
	beq     L0040
	bpl     L0036
L0040:	ldy     #$08
	jsr     ldaxysp
	clc
	ldy     #$09
	adc     (sp),y
	sta     sreg
	txa
	iny
	adc     (sp),y
	sta     sreg+1
	ldy     #$08
	jsr     ldaxysp
	bra     L0058
L0036:	ldy     #$08
	jsr     ldaxysp
	cmp     #$0D
	txa
	sbc     #$00
	bvc     L0039
	eor     #$80
L0039:	bpl     L0038
	ldy     #$08
	jsr     ldaxysp
	clc
	ldy     #$09
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     #$20
	sta     (ptr1)
	bra     L0033
L0038:	ldy     #$08
	jsr     ldaxysp
	cmp     #$0D
	txa
	sbc     #$00
	bvs     L003C
	eor     #$80
L003C:	bpl     L0033
	ldy     #$08
	jsr     ldaxysp
	clc
	ldy     #$09
	adc     (sp),y
	sta     sreg
	txa
	iny
	adc     (sp),y
	sta     sreg+1
	ldy     #$08
	jsr     ldaxysp
	clc
	ldy     #$01
	adc     (sp),y
	pha
	txa
	iny
	adc     (sp),y
	tax
	pla
	ldy     #$0D
	jsr     decaxy
L0058:	clc
	ldy     #$13
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     (ptr1)
	sta     (sreg)
L0033:	ldy     #$07
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	jmp     L0031
L0032:	ldy     #$0A
	jsr     ldaxysp
	ldy     #$10
	jsr     incaxy
	sta     ptr1
	stx     ptr1+1
	ldy     #$12
	jsr     ldeaxysp
	lda     sreg+1
	sta     (ptr1)
	ldy     #$0A
	jsr     ldaxysp
	ldy     #$11
	jsr     incaxy
	sta     ptr1
	stx     ptr1+1
	ldy     #$12
	jsr     ldeaxysp
	lda     sreg
	sta     (ptr1)
	ldy     #$0A
	jsr     ldaxysp
	ldy     #$12
	jsr     incaxy
	sta     ptr1
	stx     ptr1+1
	ldy     #$12
	jsr     ldeaxysp
	txa
	sta     (ptr1)
	ldy     #$0A
	jsr     ldaxysp
	ldy     #$13
	jsr     incaxy
	sta     ptr1
	stx     ptr1+1
	ldy     #$12
	jsr     ldeaxysp
	ldx     #$00
	sta     (ptr1)
	ldy     #$0E
	lda     (sp),y
	cmp     #$81
	bcc     L003D
	lda     #$04
	bra     L0001
L003D:	ldy     #$0A
	jsr     ldaxysp
	ldy     #$14
	jsr     incaxy
	sta     ptr1
	stx     ptr1+1
	ldy     #$0E
	lda     (sp),y
	sta     (ptr1)
	ldy     #$0A
	jsr     ldaxysp
	ldy     #$15
	jsr     incaxy
	sta     ptr1
	stx     ptr1+1
	ldy     #$0D
	lda     (sp),y
	sta     (ptr1)
	ldy     #$0A
	jsr     ldaxysp
	ldy     #$16
	jsr     incaxy
	sta     ptr1
	stx     ptr1+1
	ldy     #$0C
	lda     (sp),y
	sta     (ptr1)
	ldy     #$0A
	jsr     ldaxysp
	ldy     #$17
	jsr     incaxy
	sta     ptr1
	stx     ptr1+1
	ldy     #$0B
	lda     (sp),y
	sta     (ptr1)
	ldx     #$00
	txa
L0001:	ldy     #$15
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ alocateBlock (unsigned int *alocatedBlockNum)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_alocateBlock: near

.segment	"CODE"

	jsr     pushax
	jsr     push0
	jsr     push0
	jsr     push0
	jsr     push0
	jsr     pusha
	ldy     #$0A
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	sta     (ptr1)
	ldy     #$01
	sta     (ptr1),y
	tax
	ldy     #$05
	jsr     staxysp
L0002:	ldy     #$06
	jsr     ldaxysp
	cpx     #$02
	bcs     L0003
	ldy     #$06
	jsr     ldaxysp
	clc
	adc     #<(__FtPtBuffer)
	sta     sreg
	txa
	adc     #>(__FtPtBuffer)
	sta     sreg+1
	ldy     #$06
	jsr     ldaxysp
	sta     ptr1
	txa
	clc
	adc     #>(_FloppyBuffer)
	sta     ptr1+1
	ldy     #<(_FloppyBuffer)
	lda     (ptr1),y
	sta     (sreg)
	ldy     #$05
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	bra     L0002
L0003:	jsr     _floppyLoadBlockState
	cmp     #$00
	beq     L0006
	ldx     #$00
	lda     #$01
	jmp     L0001
L0006:	tax
	ldy     #$05
	jsr     staxysp
L0007:	ldy     #$06
	jsr     ldaxysp
	cpx     #$02
	bcs     L0008
	ldy     #$06
	jsr     ldaxysp
	clc
	adc     #<(_FloppyBuffer)
	sta     sreg
	txa
	adc     #>(_FloppyBuffer)
	sta     sreg+1
	ldy     #$06
	jsr     ldaxysp
	sta     ptr1
	txa
	clc
	adc     #>(__FtPtBuffer)
	sta     ptr1+1
	ldy     #<(__FtPtBuffer)
	lda     (ptr1),y
	sta     (sreg)
	ldy     #$05
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	bra     L0007
L0008:	ldx     #$00
	txa
	ldy     #$05
	jsr     staxysp
L000B:	ldy     #$06
	lda     (sp),y
	cmp     #$00
	bne     L000F
	dey
	lda     (sp),y
	cmp     #$80
L000F:	jcs     L000C
	ldx     #$00
	txa
	ldy     #$01
	jsr     staxysp
	ldy     #$06
	jsr     ldaxysp
	jsr     shlax1
	sta     ptr1
	stx     ptr1+1
	clc
	lda     ptr1
	sta     ptr1
	lda     #$01
	adc     ptr1+1
	clc
	adc     #>(_FloppyBuffer)
	sta     ptr1+1
	ldy     #<(_FloppyBuffer)
	lda     (ptr1),y
	tax
	lda     #$00
	ldy     #$01
	jsr     staxysp
	stz     sreg
	stx     sreg+1
	ldy     #$06
	jsr     ldaxysp
	jsr     shlax1
	sta     ptr1
	stx     ptr1+1
	ldx     #$01
	txa
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	clc
	adc     #>(_FloppyBuffer)
	sta     ptr1+1
	ldy     #<(_FloppyBuffer)
	lda     (ptr1),y
	ora     sreg
	ldx     sreg+1
	ldy     #$01
	jsr     staxysp
	ldy     #$06
	jsr     ldaxysp
	cpx     #$00
	bne     L0011
	cmp     #$00
L0011:	jsr     booleq
	ldy     #$01
	lda     (sp),y
	iny
	ora     (sp),y
	jne     L000D
	tya
	iny
	jsr     staxysp
L0014:	ldy     #$04
	lda     (sp),y
	cmp     #$0B
	bne     L0018
	dey
	lda     (sp),y
	cmp     #$40
L0018:	bcs     L0015
	ldy     #$04
	jsr     ldaxysp
	jsr     _floppyChekBlockFree
	cmp     #$01
	bne     L0016
	ldy     #$04
	jsr     ldaxysp
	jsr     _floppyMakeBlockOccupide
	ldy     #$04
	jsr     ldaxysp
	ldy     #$07
	jsr     staxysp
	ldx     #$0B
	lda     #$54
	ldy     #$03
	jsr     staxysp
L0016:	ldy     #$03
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	bra     L0014
L0015:	ldy     #$06
	jsr     ldaxysp
	jsr     shlax1
	sta     ptr1
	stx     ptr1+1
	clc
	lda     ptr1
	pha
	lda     #$01
	adc     ptr1+1
	tax
	pla
	clc
	adc     #<(_FloppyBuffer)
	sta     ptr1
	txa
	adc     #>(_FloppyBuffer)
	sta     ptr1+1
	ldy     #$08
	lda     (sp),y
	sta     (ptr1)
	ldy     #$06
	jsr     ldaxysp
	jsr     shlax1
	sta     ptr1
	stx     ptr1+1
	clc
	lda     ptr1
	pha
	lda     #$01
	adc     ptr1+1
	tax
	pla
	ina
	bne     L001A
	inx
L001A:	clc
	adc     #<(_FloppyBuffer)
	sta     ptr1
	txa
	adc     #>(_FloppyBuffer)
	sta     ptr1+1
	ldy     #$07
	lda     (sp),y
	sta     (ptr1)
	ldy     #$0A
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$08
	jsr     ldaxysp
	sta     (ptr1)
	ldy     #$01
	txa
	sta     (ptr1),y
	ldx     #$00
	txa
	ldy     #$05
	jsr     staxysp
L001B:	ldy     #$06
	jsr     ldaxysp
	cpx     #$02
	bcs     L001C
	ldy     #$06
	jsr     ldaxysp
	clc
	adc     #<(__FtPtBuffer)
	sta     sreg
	txa
	adc     #>(__FtPtBuffer)
	sta     sreg+1
	ldy     #$06
	jsr     ldaxysp
	sta     ptr1
	txa
	clc
	adc     #>(_FloppyBuffer)
	sta     ptr1+1
	ldy     #<(_FloppyBuffer)
	lda     (ptr1),y
	sta     (sreg)
	ldy     #$05
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	bra     L001B
L001C:	jsr     _floppySaveBlockState
	cmp     #$00
	beq     L001F
	ldx     #$00
	lda     #$02
	bra     L0001
L001F:	tax
	ldy     #$05
	jsr     staxysp
L0020:	ldy     #$06
	jsr     ldaxysp
	cpx     #$02
	bcs     L0021
	ldy     #$06
	jsr     ldaxysp
	clc
	adc     #<(_FloppyBuffer)
	sta     sreg
	txa
	adc     #>(_FloppyBuffer)
	sta     sreg+1
	ldy     #$06
	jsr     ldaxysp
	sta     ptr1
	txa
	clc
	adc     #>(__FtPtBuffer)
	sta     ptr1+1
	ldy     #<(__FtPtBuffer)
	lda     (ptr1),y
	sta     (sreg)
	ldy     #$05
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	bra     L0020
L0021:	ldx     #$00
	txa
	bra     L0001
L000D:	ldy     #$05
	lda     #$01
	jsr     addeqysp
	jmp     L000B
L000C:	ldx     #$00
	lda     #$FF
L0001:	ldy     #$0B
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ mkFile (char *name, unsigned long timeStamp, unsigned char sizeBlocks, unsigned int sizeBytes, unsigned int directoryHeaderNum, unsigned int *alocatedBlock)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_mkFile: near

.segment	"CODE"

	jsr     pushax
	lda     #$00
	jsr     pusha
	jsr     push0
	jsr     push0
	lda     sp
	ldx     sp+1
	jsr     _alocateBlock
	ldy     #$04
	sta     (sp),y
	ldy     #$06
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	jsr     ldax0sp
	sta     (ptr1)
	ldy     #$01
	txa
	sta     (ptr1),y
	ldy     #$04
	lda     (sp),y
	beq     L0002
	ldx     #$00
	lda     (sp),y
	jmp     L0001
L0002:	ldy     #$08
	jsr     ldaxysp
	jsr     _FloppySaveSectorNum
	ldy     #$04
	sta     (sp),y
	lda     (sp),y
	beq     L0003
	ldx     #$00
	lda     (sp),y
	ldy     #$14
	bra     L0008
L0003:	ldy     #$13
	jsr     pushwysp
	ldy     #$11
	jsr     ldeaxysp
	jsr     pusheax
	ldy     #$11
	lda     (sp),y
	jsr     pusha
	ldy     #$13
	jsr     pushwysp
	lda     #$00
	jsr     pusha
	lda     #<(_FloppyBuffer)
	ldx     #>(_FloppyBuffer)
	jsr     _formatHeader
	cmp     #$00
	beq     L0004
	ldx     #$00
	lda     #$1E
	bra     L0001
L0004:	ldy     #$06
	jsr     ldaxysp
	jsr     ldaxi
	jsr     _floppyDecodeSide
	jsr     pusha
	ldy     #$07
	jsr     ldaxysp
	jsr     ldaxi
	jsr     _floppyDecodeTrack
	jsr     pusha
	ldy     #$08
	jsr     ldaxysp
	jsr     ldaxi
	jsr     _floppyDecodeBlock
	jsr     _FloppySaveSector
	ldy     #$04
	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	beq     L0001
	ldy     #$28
L0008:	jsr     incaxy
	ldx     #$00
L0001:	ldy     #$12
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ mkDir (char *name, unsigned long timeStamp, unsigned int directoryHeaderNum, unsigned int *alocatedBlock)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_mkDir: near

.segment	"CODE"

	jsr     pushax
	lda     #$00
	jsr     pusha
	jsr     push0
	jsr     push0
	lda     sp
	ldx     sp+1
	jsr     _alocateBlock
	ldy     #$04
	sta     (sp),y
	ldy     #$06
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	jsr     ldax0sp
	sta     (ptr1)
	ldy     #$01
	txa
	sta     (ptr1),y
	ldy     #$04
	lda     (sp),y
	beq     L0002
	ldx     #$00
	lda     (sp),y
	jmp     L0001
L0002:	ldy     #$08
	jsr     ldaxysp
	jsr     _FloppySaveSectorNum
	ldy     #$04
	sta     (sp),y
	lda     (sp),y
	beq     L0003
	ldx     #$00
	lda     (sp),y
	ldy     #$14
	bra     L0008
L0003:	ldy     #$10
	jsr     pushwysp
	ldy     #$0E
	jsr     ldeaxysp
	jsr     pusheax
	lda     #$01
	jsr     pusha
	jsr     push0
	lda     #$01
	jsr     pusha
	lda     #<(_FloppyBuffer)
	ldx     #>(_FloppyBuffer)
	jsr     _formatHeader
	cmp     #$00
	beq     L0004
	ldx     #$00
	lda     #$1E
	bra     L0001
L0004:	ldy     #$06
	jsr     ldaxysp
	jsr     ldaxi
	jsr     _floppyDecodeSide
	jsr     pusha
	ldy     #$07
	jsr     ldaxysp
	jsr     ldaxi
	jsr     _floppyDecodeTrack
	jsr     pusha
	ldy     #$08
	jsr     ldaxysp
	jsr     ldaxi
	jsr     _floppyDecodeBlock
	jsr     _FloppySaveSector
	ldy     #$04
	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	beq     L0001
	ldy     #$28
L0008:	jsr     incaxy
	ldx     #$00
L0001:	ldy     #$0F
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ resetBlockPath (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_resetBlockPath: near

.segment	"CODE"

	jsr     push0
	jsr     stax0sp
L0002:	jsr     ldax0sp
	cmp     #$05
	txa
	sbc     #$00
	bvc     L0006
	eor     #$80
L0006:	asl     a
	bcc     L0007
	jsr     ldax0sp
	jsr     aslax1
	clc
	adc     #<(_curBlock)
	sta     ptr1
	txa
	adc     #>(_curBlock)
	sta     ptr1+1
	lda     #$00
	sta     (ptr1)
	ldy     #$01
	sta     (ptr1),y
	tax
	tya
	jsr     addeq0sp
	bra     L0002
L0007:	lda     #$02
	sta     _curBlock
	stz     _curBlock+1
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ floppyFormatNew (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_floppyFormatNew: near

.segment	"CODE"

	stz     _i
	stz     _i+1
L0002:	ldx     _i+1
	cpx     #$02
	bcs     L0003
	lda     _i
	clc
	adc     #<(_blockState)
	sta     ptr1
	lda     _i+1
	adc     #>(_blockState)
	sta     ptr1+1
	lda     #$00
	sta     (ptr1)
	lda     _i
	clc
	adc     #<(_FloppyBuffer)
	sta     ptr1
	lda     _i+1
	adc     #>(_FloppyBuffer)
	sta     ptr1+1
	lda     #$00
	sta     (ptr1)
	inc     _i
	bne     L0002
	inc     _i+1
	bra     L0002
L0003:	ldx     #$00
	lda     #$01
	jsr     _floppyMakeBlockOccupide
	ldx     #$00
	lda     #$02
	jsr     _floppyMakeBlockOccupide
	jsr     _floppySaveBlockState
	lda     #<(S001E)
	ldx     #>(S001E)
	jsr     pushax
	lda     _publicunixTimestamp+3
	sta     sreg+1
	lda     _publicunixTimestamp+2
	sta     sreg
	ldx     _publicunixTimestamp+1
	lda     _publicunixTimestamp
	jsr     pusheax
	lda     #$01
	jsr     pusha
	ldx     #$02
	dea
	jsr     pushax
	ina
	jsr     pusha
	lda     #<(_FloppyBuffer)
	ldx     #>(_FloppyBuffer)
	jsr     _formatHeader
	cmp     #$00
	beq     L0009
	ldx     #$00
	lda     #$01
	rts
L0009:	jsr     pusha
	jsr     pusha
	lda     #$02
	jsr     _FloppySaveSector
	cmp     #$00
	beq     L0008
	ldx     #$00
	lda     #$02
	rts
L0008:	jsr     _resetBlockPath
	ldx     #$00
	txa
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ printHeader (unsigned char *Header)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_printHeader: near

.segment	"CODE"

	jsr     pushax
	jsr     push0
	ldy     #$03
	jsr     ldaxysp
	ldy     #$17
	jsr     incaxy
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	jsr     pusha
	jsr     push0
	jsr     pusha
	ldy     #$28
	jsr     subysp
	ldy     #$2F
	jsr     ldaxysp
	ldy     #$15
	jsr     incaxy
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	tax
	ldy     #$29
	lda     (sp),y
	pha
	txa
	iny
	ora     (sp),y
	tax
	pla
	dey
	jsr     staxysp
	sta     sreg
	stx     sreg+1
	ldy     #$2F
	jsr     ldaxysp
	ldy     #$16
	jsr     incaxy
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	ora     sreg
	ldx     sreg+1
	ldy     #$29
	jsr     staxysp
	ldx     #$00
	txa
	ldy     #$2C
	jsr     staxysp
L0002:	ldy     #$2D
	jsr     ldaxysp
	cmp     #$28
	txa
	sbc     #$00
	bvc     L0006
	eor     #$80
L0006:	asl     a
	lda     #$00
	bcc     L0020
	ldy     #$2D
	jsr     ldaxysp
	jsr     leaaxsp
	sta     ptr1
	stx     ptr1+1
	lda     #$20
	sta     (ptr1)
	ldy     #$2C
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	bra     L0002
L0020:	ldy     #$27
	sta     (sp),y
	tax
	ldy     #$2C
	jsr     staxysp
L0007:	ldy     #$2D
	jsr     ldaxysp
	cmp     #$10
	txa
	sbc     #$00
	bvc     L000B
	eor     #$80
L000B:	jpl     L0008
	ldy     #$2D
	jsr     ldaxysp
	clc
	ldy     #$2E
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     (ptr1)
	cmp     #$0D
	bne     L000C
	ldx     #$00
	lda     #$10
	ldy     #$2C
	jsr     staxysp
L000C:	ldy     #$2D
	lda     (sp),y
	bne     L0029
	dey
	lda     (sp),y
	cmp     #$0D
	bne     L000D
	dey
	lda     (sp),y
	bne     L000D
	lda     sp
	ldx     sp+1
	ldy     #$28
	sta     ptr1
	stx     ptr1+1
	lda     (sp),y
	tay
	lda     #$2E
	sta     (ptr1),y
	ldy     #$28
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
L000D:	ldy     #$2D
L0029:	jsr     ldaxysp
	clc
	ldy     #$2E
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     (ptr1)
	cmp     #$20
	beq     L0009
	ldy     #$2D
	jsr     ldaxysp
	clc
	ldy     #$2E
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     (ptr1)
	beq     L0009
	lda     sp
	ldx     sp+1
	ldy     #$28
	clc
	adc     (sp),y
	bcc     L0017
	inx
L0017:	sta     sreg
	stx     sreg+1
	ldy     #$2D
	jsr     ldaxysp
	clc
	ldy     #$2E
	adc     (sp),y
	sta     ptr1
	txa
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     (ptr1)
	sta     (sreg)
	ldy     #$28
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
L0009:	ldy     #$2C
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	jmp     L0007
L0008:	ldy     #$2B
	lda     (sp),y
	cmp     #$01
	bne     L0026
	lda     #$10
	jsr     leaa0sp
	jsr     pushax
	lda     #<(S001F)
	ldx     #>(S001F)
	jsr     _strcpy
	ldy     #$2B
L0026:	lda     (sp),y
	bne     L0019
	tax
	iny
	jsr     staxysp
L001A:	ldy     #$2D
	jsr     ldaxysp
	cmp     #$06
	txa
	sbc     #$00
	bvc     L001E
	eor     #$80
L001E:	asl     a
	bcc     L0028
	ldy     #$2D
	jsr     ldaxysp
	clc
	adc     #<(_StrBuffer)
	sta     ptr1
	txa
	adc     #>(_StrBuffer)
	sta     ptr1+1
	lda     #$20
	sta     (ptr1)
	ldy     #$2C
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	bra     L001A
L0028:	stz     _StrBuffer+6
	lda     #$15
	jsr     leaa0sp
	jsr     pushax
	lda     #<(S0020)
	ldx     #>(S0020)
	jsr     _strcpy
	ldy     #$2C
	jsr     pushwysp
	lda     #$1D
	jsr     leaa0sp
	jsr     pushax
	ldx     #$00
	lda     #$0A
	jsr     _itoa
L0019:	lda     sp
	ldx     sp+1
	jsr     pushax
	lda     #$00
	jsr     pusha
	ina
	jsr     _karnelPrint
	ldy     #$30
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ floppyLoadBlockNum (unsigned int blockNum)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_floppyLoadBlockNum: near

.segment	"CODE"

	jsr     pushax
	jsr     ldax0sp
	jsr     _floppyDecodeSide
	jsr     pusha
	ldy     #$02
	jsr     ldaxysp
	jsr     _floppyDecodeTrack
	jsr     pusha
	ldy     #$03
	jsr     ldaxysp
	jsr     _floppyDecodeBlock
	jsr     pusha
	ldy     #$02
	lda     (sp),y
	jsr     pusha
	ldy     #$02
	lda     (sp),y
	jsr     pusha
	ldy     #$02
	lda     (sp),y
	jsr     _FloppyLoadSector
	jmp     incsp5

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ dumpDirectory (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_dumpDirectory: near

.segment	"CODE"

	lda     #$00
	jsr     pusha
	jsr     push0
	jsr     push0
	jsr     pusha
	ldy     #$03
	jsr     staxysp
L0002:	ldy     #$04
	jsr     ldaxysp
	cpx     #$02
	bcs     L0003
	ldy     #$04
	jsr     ldaxysp
	clc
	adc     #<(__FtPtBuffer)
	sta     sreg
	txa
	adc     #>(__FtPtBuffer)
	sta     sreg+1
	ldy     #$04
	jsr     ldaxysp
	sta     ptr1
	txa
	clc
	adc     #>(_FloppyBuffer)
	sta     ptr1+1
	ldy     #<(_FloppyBuffer)
	lda     (ptr1),y
	sta     (sreg)
	ldy     #$03
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	bra     L0002
L0003:	ldx     #$00
	txa
	ldy     #$03
	jsr     staxysp
L0006:	ldy     #$04
	lda     (sp),y
	cmp     #$00
	bne     L000A
	dey
	lda     (sp),y
	cmp     #$80
L000A:	jcs     L0007
	ldx     #$00
	txa
	ldy     #$01
	jsr     staxysp
	ldy     #$04
	jsr     ldaxysp
	jsr     shlax1
	sta     ptr1
	stx     ptr1+1
	clc
	lda     ptr1
	sta     ptr1
	lda     #$01
	adc     ptr1+1
	clc
	adc     #>(__FtPtBuffer)
	sta     ptr1+1
	ldy     #<(__FtPtBuffer)
	lda     (ptr1),y
	tax
	lda     #$00
	ldy     #$01
	jsr     staxysp
	stz     sreg
	stx     sreg+1
	ldy     #$04
	jsr     ldaxysp
	jsr     shlax1
	sta     ptr1
	stx     ptr1+1
	ldx     #$01
	txa
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	clc
	adc     #>(__FtPtBuffer)
	sta     ptr1+1
	ldy     #<(__FtPtBuffer)
	lda     (ptr1),y
	ora     sreg
	ldx     sreg+1
	ldy     #$01
	jsr     staxysp
	cpx     #$00
	bne     L000B
	cmp     #$00
	beq     L0001
L000B:	ldy     #$02
	jsr     ldaxysp
	jsr     _floppyLoadBlockNum
	sta     (sp)
	lda     (sp)
	beq     L000D
	ldx     #$00
	lda     (sp)
	jmp     incsp6
L000D:	lda     #<(_FloppyBuffer)
	ldx     #>(_FloppyBuffer)
	jsr     _printHeader
	ldy     #$03
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	jmp     L0006
L0007:	ldx     #$00
	txa
L0001:	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; void __near__ keyBoardInputToBufferUpdate (unsigned char *parse)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_keyBoardInputToBufferUpdate: near

.segment	"CODE"

	jsr     pushax
	lda     ___CursorState
	cmp     #$01
	bne     L0002
	lda     _KeyBufferCounter
	cmp     _OldKeyBufferCounter
	bne     L0002
	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	bne     L0002
	ldy     _InputKeyBufferPointer
	lda     #$DC
	bra     L0015
L0002:	ldy     _InputKeyBufferPointer
	lda     #$20
L0015:	sta     _InputKeyBuffer,y
	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	cmp     #$01
	jeq     L000B
	lda     _InputKeyBufferPointer
	cmp     #$28
	bcc     L0018
	lda     #$20
	sta     _InputKeyBuffer+39
	stz     _InputKeyBuffer+40
	dec     _InputKeyBufferPointer
	jmp     incsp2
L0018:	lda     _KeyBufferCounter
	cmp     _OldKeyBufferCounter
	beq     L000B
	ldy     _KeyBufferCounter
	lda     _KeyBuffer,y
	cmp     #$08
	bne     L000C
	lda     _KeyBufferCounter
	sta     _OldKeyBufferCounter
	lda     _InputKeyBufferPointer
	beq     L000E
	dec     _InputKeyBufferPointer
L000E:	ldy     _InputKeyBufferPointer
	lda     #$20
	sta     _InputKeyBuffer,y
	jmp     incsp2
L000C:	ldy     _KeyBufferCounter
	lda     _KeyBuffer,y
	cmp     #$0D
	bne     L0019
	lda     _KeyBufferCounter
	sta     _OldKeyBufferCounter
	ldy     _InputKeyBufferPointer
	lda     #$00
	sta     _InputKeyBuffer,y
	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	lda     #$01
	sta     (ptr1)
	jmp     incsp2
L0019:	lda     _KeyBufferCounter
	sta     _OldKeyBufferCounter
	lda     #<(_InputKeyBuffer)
	ldx     #>(_InputKeyBuffer)
	clc
	adc     _InputKeyBufferPointer
	bcc     L0013
	inx
L0013:	sta     ptr1
	stx     ptr1+1
	ldy     _KeyBufferCounter
	lda     _KeyBuffer,y
	sta     (ptr1)
	inc     _InputKeyBufferPointer
L000B:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ UpdateParse (unsigned char *parse, unsigned char *curToken)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_UpdateParse: near

.segment	"CODE"

	jsr     pushax
	jsr     decsp4
	ldy     #$01
L0002:	lda     M0001,y
	sta     (sp),y
	dey
	bpl     L0002
	jsr     push0
	jsr     stax0sp
L0003:	jsr     ldax0sp
	cmp     #$28
	txa
	sbc     #$00
	bvc     L0007
	eor     #$80
L0007:	bpl     L0004
	jsr     ldax0sp
	clc
	adc     #<(_funcParametar)
	sta     ptr1
	txa
	adc     #>(_funcParametar)
	sta     ptr1+1
	lda     #$00
	sta     (ptr1)
	tax
	ina
	jsr     addeq0sp
	bra     L0003
L0004:	ldy     #$09
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	jeq     L0001
	ldy     #$09
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	sta     (ptr1)
	lda     #<(_InputKeyBuffer)
	ldx     #>(_InputKeyBuffer)
	jsr     pushax
	lda     #$04
	jsr     leaa0sp
	jsr     _strtok
	ldy     #$04
	jsr     staxysp
	jsr     pushax
	lda     #<(S0022)
	ldx     #>(S0022)
	jsr     _strcmp
	cpx     #$00
	bne     L0009
	cmp     #$00
	bne     L0009
	ldy     #$07
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     _TknDir
	sta     (ptr1)
	jmp     L0025
L0009:	ldy     #$07
	jsr     pushwysp
	lda     #<(S0023)
	ldx     #>(S0023)
	jsr     _strcmp
	cpx     #$00
	bne     L000C
	cmp     #$00
	bne     L000C
	ldy     #$07
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     _TknPwd
	sta     (ptr1)
	jmp     L0025
L000C:	ldy     #$07
	jsr     pushwysp
	lda     #<(S0024)
	ldx     #>(S0024)
	jsr     _strcmp
	cpx     #$00
	bne     L000F
	cmp     #$00
	bne     L000F
	ldy     #$07
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     _TknRoot
	sta     (ptr1)
	jmp     L0025
L000F:	ldy     #$07
	jsr     pushwysp
	lda     #<(S0025)
	ldx     #>(S0025)
	jsr     _strcmp
	cpx     #$00
	bne     L0012
	cmp     #$00
	bne     L0012
	ldy     #$07
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     _TknCd
	sta     (ptr1)
	jsr     push0
	lda     #$04
	jsr     leaa0sp
	jsr     _strtok
	ldy     #$04
	jsr     staxysp
	lda     #<(_funcParametar)
	ldx     #>(_funcParametar)
	jsr     pushax
	ldy     #$07
	jsr     ldaxysp
	jsr     _strcpy
	jmp     L0025
L0012:	ldy     #$07
	jsr     pushwysp
	lda     #<(S0026)
	ldx     #>(S0026)
	jsr     _strcmp
	cpx     #$00
	bne     L0015
	cmp     #$00
	bne     L0015
	ldy     #$07
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     _TknMkDir
	sta     (ptr1)
	jsr     push0
	lda     #$04
	jsr     leaa0sp
	jsr     _strtok
	ldy     #$04
	jsr     staxysp
	lda     #<(_funcParametar)
	ldx     #>(_funcParametar)
	jsr     pushax
	ldy     #$07
	jsr     ldaxysp
	jsr     _strcpy
	jmp     L0025
L0015:	ldy     #$07
	jsr     pushwysp
	lda     #<(S0027)
	ldx     #>(S0027)
	jsr     _strcmp
	cpx     #$00
	bne     L0018
	cmp     #$00
	bne     L0018
	ldy     #$07
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     _TknMkFile
	sta     (ptr1)
	jsr     push0
	lda     #$04
	jsr     leaa0sp
	jsr     _strtok
	ldy     #$04
	jsr     staxysp
	lda     #<(_funcParametar)
	ldx     #>(_funcParametar)
	jsr     pushax
	ldy     #$07
	jsr     ldaxysp
	jsr     _strcpy
	bra     L0025
L0018:	ldy     #$07
	jsr     pushwysp
	lda     #<(S0028)
	ldx     #>(S0028)
	jsr     _strcmp
	cpx     #$00
	bne     L001B
	cmp     #$00
	bne     L001B
	ldy     #$07
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     _TknFromat
	sta     (ptr1)
	bra     L0025
L001B:	ldy     #$07
	jsr     pushwysp
	lda     #<(S0029)
	ldx     #>(S0029)
	jsr     _strcmp
	cpx     #$00
	bne     L001E
	cmp     #$00
	bne     L001E
	ldy     #$07
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     _TknCls
	sta     (ptr1)
	bra     L0025
L001E:	ldy     #$07
	jsr     pushwysp
	lda     #<(S002A)
	ldx     #>(S002A)
	jsr     _strcmp
	cpx     #$00
	bne     L0025
	cmp     #$00
	bne     L0025
	ldy     #$07
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     _TknTstEx
	sta     (ptr1)
	bra     L0025
L0023:	jsr     push0
	lda     #$04
	jsr     leaa0sp
	jsr     _strtok
	ldy     #$04
	jsr     staxysp
L0025:	ldy     #$04
	lda     (sp),y
	iny
	ora     (sp),y
	bne     L0023
	tax
	jsr     stax0sp
L0027:	jsr     ldax0sp
	cmp     #$28
	txa
	sbc     #$00
	bvc     L002B
	eor     #$80
L002B:	asl     a
	bcc     L002D
	jsr     ldax0sp
	clc
	adc     #<(_InputKeyBuffer)
	sta     ptr1
	txa
	adc     #>(_InputKeyBuffer)
	sta     ptr1+1
	lda     #$20
	sta     (ptr1)
	ldx     #$00
	lda     #$01
	jsr     addeq0sp
	bra     L0027
L002D:	stz     _InputKeyBufferPointer
L0001:	ldy     #$0A
	jmp     addysp

.segment	"RODATA"

M0001:
	.byte	$20,$00

.endproc

; ---------------------------------------------------------------
; void __near__ openRoot (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_openRoot: near

.segment	"CODE"

	jsr     _resetBlockPath
	ldx     #$00
	lda     #$02
	jmp     _floppyLoadBlockNum

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ lastDirectory (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_lastDirectory: near

.segment	"CODE"

	jsr     push0
	bra     L0004
L0002:	ldx     #$00
	lda     #$01
	jsr     addeq0sp
L0004:	jsr     ldax0sp
	jsr     aslax1
	clc
	adc     #<(_curBlock)
	tay
	txa
	adc     #>(_curBlock)
	tax
	tya
	jsr     ldaxi
	cpx     #$00
	bne     L0002
	cmp     #$00
	bne     L0002
	ina
	jsr     subeq0sp
	jsr     ldax0sp
	jsr     aslax1
	clc
	adc     #<(_curBlock)
	tay
	txa
	adc     #>(_curBlock)
	tax
	tya
	jsr     ldaxi
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ openLastDirectory (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_openLastDirectory: near

.segment	"CODE"

	jsr     _lastDirectory
	jmp     _floppyLoadBlockNum

.endproc

; ---------------------------------------------------------------
; void __near__ printPath (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_printPath: near

.segment	"CODE"

	jsr     push0
	jsr     push0
	jsr     push0
	ldy     #$51
	jsr     subysp
	lda     #$00
	ldy     #$55
	jsr     staxysp
L0002:	ldy     #$56
	jsr     ldaxysp
	cmp     #$51
	txa
	sbc     #$00
	bvc     L0006
	eor     #$80
L0006:	asl     a
	lda     #$00
	tax
	bcc     L0017
	ldy     #$56
	jsr     ldaxysp
	jsr     leaaxsp
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	sta     (ptr1)
	ldy     #$55
	tax
	ina
	jsr     addeqysp
	bra     L0002
L0017:	ldy     #$55
	jsr     staxysp
L0007:	ldy     #$56
	jsr     ldaxysp
	cmp     #$05
	txa
	sbc     #$00
	bvc     L000B
	eor     #$80
L000B:	jpl     L0008
	ldy     #$56
	jsr     ldaxysp
	jsr     aslax1
	clc
	adc     #<(_curBlock)
	tay
	txa
	adc     #>(_curBlock)
	tax
	tya
	jsr     ldaxi
	cpx     #$00
	bne     L000C
	cmp     #$00
	bne     L000C
	lda     sp
	ldx     sp+1
	jsr     pushax
	lda     #$00
	jsr     pusha
	ina
	jsr     _karnelPrint
	jmp     L0008
L000C:	ldy     #$56
	jsr     ldaxysp
	jsr     aslax1
	clc
	adc     #<(_curBlock)
	tay
	txa
	adc     #>(_curBlock)
	tax
	tya
	jsr     ldaxi
	jsr     _floppyLoadBlockNum
	ldx     #$00
	txa
	ldy     #$53
	jsr     staxysp
L000E:	ldy     #$54
	jsr     ldaxysp
	sta     ptr1
	txa
	clc
	adc     #>(_FloppyBuffer)
	sta     ptr1+1
	ldy     #<(_FloppyBuffer)
	lda     (ptr1),y
	beq     L000F
	ldy     #$54
	jsr     ldaxysp
	sta     ptr1
	txa
	clc
	adc     #>(_FloppyBuffer)
	sta     ptr1+1
	ldy     #<(_FloppyBuffer)
	lda     (ptr1),y
	cmp     #$20
	beq     L000F
	ldy     #$54
	jsr     ldaxysp
	clc
	ldy     #$51
	adc     (sp),y
	pha
	txa
	iny
	adc     (sp),y
	tax
	pla
	jsr     leaaxsp
	sta     sreg
	stx     sreg+1
	ldy     #$54
	jsr     ldaxysp
	sta     ptr1
	txa
	clc
	adc     #>(_FloppyBuffer)
	sta     ptr1+1
	ldy     #<(_FloppyBuffer)
	lda     (ptr1),y
	sta     (sreg)
	ldy     #$53
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	bra     L000E
L000F:	ldy     #$52
	jsr     ldaxysp
	clc
	ldy     #$53
	adc     (sp),y
	pha
	txa
	iny
	adc     (sp),y
	tax
	pla
	ldy     #$51
	jsr     staxysp
	jsr     leaaxsp
	sta     ptr1
	stx     ptr1+1
	lda     #$5C
	sta     (ptr1)
	ldy     #$51
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	ldy     #$55
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	jmp     L0007
L0008:	ldy     #$57
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ findEntry (unsigned char *name)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_findEntry: near

.segment	"CODE"

	jsr     pushax
	jsr     push0
	jsr     push0
	jsr     push0
	jsr     push0
	jsr     push0
	jsr     _openLastDirectory
	ldx     #$00
	txa
	ldy     #$08
	jsr     staxysp
L0002:	ldy     #$09
	jsr     ldaxysp
	cmp     #$80
	txa
	sbc     #$00
	bvc     L0006
	eor     #$80
L0006:	asl     a
	lda     #$00
	tax
	rol     a
	jeq     L0003
	txa
	ldy     #$02
	jsr     staxysp
	ldy     #$09
	jsr     ldaxysp
	jsr     aslax1
	sta     ptr1
	stx     ptr1+1
	clc
	lda     ptr1
	sta     ptr1
	lda     #$01
	adc     ptr1+1
	clc
	adc     #>(_FloppyBuffer)
	sta     ptr1+1
	ldy     #<(_FloppyBuffer)
	lda     (ptr1),y
	tax
	lda     #$00
	ldy     #$02
	jsr     staxysp
	stz     sreg
	stx     sreg+1
	ldy     #$09
	jsr     ldaxysp
	jsr     aslax1
	sta     ptr1
	stx     ptr1+1
	ldx     #$01
	txa
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	clc
	adc     #>(_FloppyBuffer)
	sta     ptr1+1
	ldy     #<(_FloppyBuffer)
	lda     (ptr1),y
	ora     sreg
	ldx     sreg+1
	ldy     #$02
	jsr     staxysp
	cpx     #$00
	bne     L0007
	cmp     #$00
	bne     L002B
	lda     #<(S002B)
	ldx     #>(S002B)
	jsr     pushax
	lda     #$00
	jsr     pusha
	ina
	jsr     _karnelPrint
	ldx     #$00
	txa
	jmp     L0003
L0007:	ldx     #$00
L002B:	txa
	ldy     #$06
	jsr     staxysp
L0009:	ldy     #$07
	jsr     ldaxysp
	cmp     #$00
	txa
	sbc     #$02
	bvc     L000D
	eor     #$80
L000D:	bpl     L000A
	ldy     #$07
	jsr     ldaxysp
	clc
	adc     #<(__FtPtBuffer)
	sta     sreg
	txa
	adc     #>(__FtPtBuffer)
	sta     sreg+1
	ldy     #$07
	jsr     ldaxysp
	sta     ptr1
	txa
	clc
	adc     #>(_FloppyBuffer)
	sta     ptr1+1
	ldy     #<(_FloppyBuffer)
	lda     (ptr1),y
	sta     (sreg)
	ldy     #$06
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	bra     L0009
L000A:	ldy     #$03
	jsr     ldaxysp
	jsr     _floppyLoadBlockNum
	cmp     #$00
	beq     L000E
	lda     #<(S002C)
	ldx     #>(S002C)
	jsr     pushax
	lda     #$00
	jsr     pusha
	ina
	jsr     _karnelPrint
	ldx     #$00
	txa
	jmp     L0003
L000E:	tax
	ldy     #$06
	jsr     staxysp
L000F:	ldy     #$07
	jsr     ldaxysp
	cmp     #$20
	txa
	sbc     #$00
	bvc     L0013
	eor     #$80
L0013:	asl     a
	lda     #$00
	tax
	bcc     L0028
	ldy     #$07
	jsr     ldaxysp
	clc
	adc     #<(_StrBuffer)
	sta     ptr1
	txa
	adc     #>(_StrBuffer)
	sta     ptr1+1
	lda     #$00
	sta     (ptr1)
	ldy     #$06
	tax
	ina
	jsr     addeqysp
	bra     L000F
L0028:	ldy     #$04
	jsr     staxysp
	ldy     #$06
	jsr     staxysp
L0014:	ldy     #$07
	jsr     ldaxysp
	cmp     #$10
	txa
	sbc     #$00
	bvc     L0018
	eor     #$80
L0018:	jpl     L0015
	ldy     #$07
	jsr     ldaxysp
	sta     ptr1
	txa
	clc
	adc     #>(_FloppyBuffer)
	sta     ptr1+1
	ldy     #<(_FloppyBuffer)
	lda     (ptr1),y
	cmp     #$0D
	bne     L0019
	ldx     #$00
	lda     #$10
	ldy     #$06
	jsr     staxysp
L0019:	ldy     #$07
	lda     (sp),y
	bne     L002D
	dey
	lda     (sp),y
	cmp     #$0D
	bne     L001A
	iny
	jsr     ldaxysp
	sta     ptr1
	txa
	clc
	adc     #>(_FloppyBuffer)
	sta     ptr1+1
	ldy     #<(_FloppyBuffer)
	lda     (ptr1),y
	cmp     #$20
	beq     L001A
	ldy     #$05
	jsr     ldaxysp
	clc
	adc     #<(_StrBuffer)
	sta     ptr1
	txa
	adc     #>(_StrBuffer)
	sta     ptr1+1
	lda     #$2E
	sta     (ptr1)
	ldy     #$04
	ldx     #$00
	lda     #$01
	jsr     addeqysp
L001A:	ldy     #$07
L002D:	jsr     ldaxysp
	sta     ptr1
	txa
	clc
	adc     #>(_FloppyBuffer)
	sta     ptr1+1
	ldy     #<(_FloppyBuffer)
	lda     (ptr1),y
	cmp     #$20
	beq     L0016
	ldy     #$05
	jsr     ldaxysp
	clc
	adc     #<(_StrBuffer)
	sta     sreg
	txa
	adc     #>(_StrBuffer)
	sta     sreg+1
	ldy     #$07
	jsr     ldaxysp
	sta     ptr1
	txa
	clc
	adc     #>(_FloppyBuffer)
	sta     ptr1+1
	ldy     #<(_FloppyBuffer)
	lda     (ptr1),y
	sta     (sreg)
	ldy     #$04
	ldx     #$00
	lda     #$01
	jsr     addeqysp
L0016:	ldy     #$06
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	jmp     L0014
L0015:	lda     #<(_StrBuffer)
	ldx     #>(_StrBuffer)
	jsr     pushax
	ldy     #$0D
	jsr     ldaxysp
	jsr     _strcmp
	cpx     #$00
	bne     L0020
	cmp     #$00
	bne     L002C
	ldy     #$02
	lda     (sp),y
	bra     L0003
L0020:	ldx     #$00
L002C:	txa
	ldy     #$06
	jsr     staxysp
L0022:	ldy     #$07
	jsr     ldaxysp
	cmp     #$00
	txa
	sbc     #$02
	bvc     L0026
	eor     #$80
L0026:	bpl     L0004
	ldy     #$07
	jsr     ldaxysp
	clc
	adc     #<(_FloppyBuffer)
	sta     sreg
	txa
	adc     #>(_FloppyBuffer)
	sta     sreg+1
	ldy     #$07
	jsr     ldaxysp
	sta     ptr1
	txa
	clc
	adc     #>(__FtPtBuffer)
	sta     ptr1+1
	ldy     #<(__FtPtBuffer)
	lda     (ptr1),y
	sta     (sreg)
	ldy     #$06
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	bra     L0022
L0004:	ldy     #$08
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	jmp     L0002
L0003:	ldy     #$0C
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ findOpenDirectory (unsigned char *name)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_findOpenDirectory: near

.segment	"CODE"

	jsr     pushax
	jsr     push0
	jsr     push0
	ldy     #$07
	jsr     pushwysp
	lda     #<(S002D)
	ldx     #>(S002D)
	jsr     _strcmp
	cpx     #$00
	bne     L0002
	cmp     #$00
	bne     L0002
	bra     L0006
L0004:	ldx     #$00
	lda     #$01
	jsr     addeq0sp
L0006:	jsr     ldax0sp
	jsr     aslax1
	clc
	adc     #<(_curBlock)
	tay
	txa
	adc     #>(_curBlock)
	tax
	tya
	jsr     ldaxi
	cpx     #$00
	bne     L0004
	cmp     #$00
	bne     L0004
	ina
	jsr     subeq0sp
	lda     (sp)
	ldy     #$01
	ora     (sp),y
	jeq     L0001
	jsr     ldax0sp
	jsr     aslax1
	clc
	adc     #<(_curBlock)
	sta     ptr1
	txa
	adc     #>(_curBlock)
	sta     ptr1+1
	lda     #$00
	sta     (ptr1)
	ldy     #$01
	bra     L0016
L0002:	ldy     #$07
	jsr     pushwysp
	lda     #<(S002E)
	ldx     #>(S002E)
	jsr     _strcmp
	cpx     #$00
	bne     L0014
	cmp     #$00
	beq     L0001
L0014:	ldy     #$05
	jsr     ldaxysp
	jsr     _findEntry
	ldy     #$02
	jsr     staxysp
	cpx     #$00
	bne     L0015
	cmp     #$00
	beq     L0001
L0015:	lda     _FloppyBuffer+23
	cmp     #$01
	beq     L0011
	lda     #<(S002F)
	ldx     #>(S002F)
	jsr     pushax
	lda     #$00
	jsr     pusha
	ina
	jsr     _karnelPrint
	bra     L0011
L000F:	ldx     #$00
	lda     #$01
	jsr     addeq0sp
L0011:	jsr     ldax0sp
	jsr     aslax1
	clc
	adc     #<(_curBlock)
	tay
	txa
	adc     #>(_curBlock)
	tax
	tya
	jsr     ldaxi
	cpx     #$00
	bne     L000F
	cmp     #$00
	bne     L000F
	jsr     ldax0sp
	jsr     aslax1
	clc
	adc     #<(_curBlock)
	sta     ptr1
	txa
	adc     #>(_curBlock)
	sta     ptr1+1
	ldy     #$03
	jsr     ldaxysp
	sta     (ptr1)
	ldy     #$01
	txa
L0016:	sta     (ptr1),y
L0001:	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; void __near__ makeDirectory (unsigned char *name)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_makeDirectory: near

.segment	"CODE"

	jsr     pushax
	jsr     _lastDirectory
	jsr     pushax
	jsr     push0
	jsr     push0
	ldy     #$09
	jsr     pushwysp
	lda     #<(S0030)
	ldx     #>(S0030)
	jsr     _strcat
	jsr     _openLastDirectory
	ldy     #$09
	jsr     pushwysp
	lda     _publicunixTimestamp+3
	sta     sreg+1
	lda     _publicunixTimestamp+2
	sta     sreg
	ldx     _publicunixTimestamp+1
	lda     _publicunixTimestamp
	jsr     pusheax
	ldy     #$0D
	jsr     pushwysp
	lda     #$0A
	jsr     leaa0sp
	jsr     _mkDir
	cmp     #$00
	beq     L0002
	lda     #<(S0031)
	ldx     #>(S0031)
	jsr     pushax
	lda     #$00
	jsr     pusha
	ina
	jsr     _karnelPrint
	jmp     incsp8
L0002:	jsr     _openLastDirectory
	jmp     incsp8

.endproc

; ---------------------------------------------------------------
; void __near__ makeFile (unsigned char *name)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_makeFile: near

.segment	"CODE"

	jsr     pushax
	jsr     _lastDirectory
	jsr     pushax
	jsr     push0
	jsr     push0
	ldy     #$09
	jsr     pushwysp
	lda     #<(S0032)
	ldx     #>(S0032)
	jsr     _strcat
	jsr     _openLastDirectory
	ldy     #$09
	jsr     pushwysp
	lda     _publicunixTimestamp+3
	sta     sreg+1
	lda     _publicunixTimestamp+2
	sta     sreg
	ldx     _publicunixTimestamp+1
	lda     _publicunixTimestamp
	jsr     pusheax
	lda     #$01
	jsr     pusha
	jsr     push0
	ldy     #$10
	jsr     pushwysp
	lda     #$0D
	jsr     leaa0sp
	jsr     _mkFile
	cmp     #$00
	beq     L0002
	lda     #<(S0033)
	ldx     #>(S0033)
	jsr     pushax
	lda     #$00
	jsr     pusha
	ina
	jsr     _karnelPrint
	jmp     incsp8
L0002:	jsr     _openLastDirectory
	jmp     incsp8

.endproc

; ---------------------------------------------------------------
; void __near__ testExMem (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_testExMem: near

.segment	"CODE"

	jsr     push0
	jsr     push0
	jsr     pusha
	jsr     push0
	jsr     push0
	ldy     #$07
	jsr     staxysp
L0002:	ldy     #$08
	jsr     ldaxysp
	cmp     #$10
	txa
	sbc     #$00
	bvc     L0006
	eor     #$80
L0006:	jpl     L0003
	ldx     #$00
	txa
	ldy     #$02
	jsr     staxysp
L0007:	ldy     #$03
	jsr     ldaxysp
	cmp     #$28
	txa
	sbc     #$00
	bvc     L000B
	eor     #$80
L000B:	asl     a
	lda     #$00
	bcc     L001F
	ldy     #$03
	jsr     ldaxysp
	clc
	adc     #<(_StrBuffer)
	sta     ptr1
	txa
	adc     #>(_StrBuffer)
	sta     ptr1+1
	lda     #$20
	sta     (ptr1)
	ldy     #$02
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	bra     L0007
L001F:	stz     _StrBuffer+39
	tax
	jsr     stax0sp
	lda     #<(_StrBuffer)
	ldx     #>(_StrBuffer)
	jsr     pushax
	lda     #<(S0034)
	ldx     #>(S0034)
	jsr     _strcpy
	ldy     #$0A
	jsr     pushwysp
	lda     #<(_StrBuffer+13)
	ldx     #>(_StrBuffer+13)
	jsr     pushax
	ldx     #$00
	lda     #$0A
	jsr     _itoa
	lda     #<(_StrBuffer)
	ldx     #>(_StrBuffer)
	jsr     pushax
	lda     #$00
	jsr     pusha
	ina
	jsr     _karnelPrint
	lda     _karnelY
	sec
	sbc     #$01
	sta     _karnelY
	bcs     L000C
	dec     _karnelY+1
L000C:	ldx     #$00
	txa
	ldy     #$05
	jsr     staxysp
L000D:	ldy     #$06
	jsr     ldaxysp
	cpx     #$40
	bcs     L000E
	lda     #$FF
	ldy     #$04
	sta     (sp),y
	jsr     pusha
	ldy     #$08
	lda     (sp),y
	jsr     pusha
	ldy     #$08
	jsr     ldaxysp
	jsr     _putByteEMem
	ldy     #$07
	lda     (sp),y
	jsr     pusha
	ldy     #$07
	jsr     ldaxysp
	jsr     _getByteEMem
	ldy     #$04
	cmp     (sp),y
	bne     L0020
	txa
	beq     L0023
L0020:	ldx     #$00
	lda     #$01
	jsr     addeq0sp
	lda     #$00
	ldy     #$04
L0023:	sta     (sp),y
	jsr     pusha
	ldy     #$08
	lda     (sp),y
	jsr     pusha
	ldy     #$08
	jsr     ldaxysp
	jsr     _putByteEMem
	ldy     #$07
	lda     (sp),y
	jsr     pusha
	ldy     #$07
	jsr     ldaxysp
	jsr     _getByteEMem
	ldy     #$04
	cmp     (sp),y
	bne     L0021
	txa
	beq     L000F
L0021:	ldx     #$00
	lda     #$01
	jsr     addeq0sp
L000F:	ldy     #$05
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	jmp     L000D
L000E:	lda     (sp)
	ldy     #$01
	ora     (sp),y
	beq     L0013
	lda     #<(_StrBuffer+20)
	ldx     #>(_StrBuffer+20)
	jsr     pushax
	lda     #<(S0035)
	ldx     #>(S0035)
	jsr     _strcpy
	jsr     ldax0sp
	jsr     axulong
	jsr     pusheax
	lda     #<(_StrBuffer+26)
	ldx     #>(_StrBuffer+26)
	jsr     pushax
	ldx     #$00
	lda     #$0A
	jsr     _ltoa
	bra     L0015
L0013:	lda     #<(_StrBuffer+20)
	ldx     #>(_StrBuffer+20)
	jsr     pushax
	lda     #<(S0036)
	ldx     #>(S0036)
	jsr     _strcpy
L0015:	ldx     #$00
	txa
	ldy     #$02
	jsr     staxysp
L0016:	ldy     #$03
	jsr     ldaxysp
	cmp     #$14
	txa
	sbc     #$00
	bvc     L001A
	eor     #$80
L001A:	bpl     L0017
	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	txa
	clc
	adc     #>(_StrBuffer)
	sta     ptr1+1
	ldy     #<(_StrBuffer)
	lda     (ptr1),y
	bne     L0018
	ldy     #$03
	jsr     ldaxysp
	clc
	adc     #<(_StrBuffer)
	sta     ptr1
	txa
	adc     #>(_StrBuffer)
	sta     ptr1+1
	lda     #$20
	sta     (ptr1)
L0018:	ldy     #$02
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	bra     L0016
L0017:	lda     #<(_StrBuffer)
	ldx     #>(_StrBuffer)
	jsr     pushax
	lda     #$00
	jsr     pusha
	ina
	jsr     _karnelPrint
	ldy     #$07
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	jmp     L0002
L0003:	ldy     #$09
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ doFunction (unsigned char *curToken)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_doFunction: near

.segment	"CODE"

	jsr     pushax
	jsr     push0
	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	cmp     _TknDir
	bne     L0002
	jsr     _openLastDirectory
	jsr     _dumpDirectory
	bra     L0004
L0002:	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	cmp     _TknRoot
	bne     L0004
	jsr     _openRoot
L0004:	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	cmp     _TknPwd
	bne     L0005
	jsr     _printPath
L0005:	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	cmp     _TknCd
	bne     L0006
	lda     #<(_funcParametar)
	ldx     #>(_funcParametar)
	jsr     _findOpenDirectory
L0006:	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	cmp     _TknMkDir
	bne     L0007
	lda     #<(_funcParametar)
	ldx     #>(_funcParametar)
	jsr     _makeDirectory
L0007:	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	cmp     _TknMkFile
	bne     L0008
	lda     #<(_funcParametar)
	ldx     #>(_funcParametar)
	jsr     _makeFile
L0008:	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	cmp     _TknFromat
	bne     L0009
	jsr     _floppyFormatNew
	lda     #<(S0037)
	ldx     #>(S0037)
	jsr     pushax
	lda     #$00
	jsr     pusha
	ina
	jsr     _karnelPrint
	lda     #<(S0038)
	ldx     #>(S0038)
	jsr     pushax
	lda     #$00
	jsr     pusha
	ina
	jsr     _karnelPrint
L0009:	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	cmp     _TknCls
	bne     L000A
	ldx     #$00
	txa
	stz     _karnelY
	stz     _karnelY+1
	jsr     stax0sp
L000B:	jsr     ldax0sp
	cmp     #$C0
	txa
	sbc     #$03
	bvc     L000F
	eor     #$80
L000F:	bpl     L000C
	jsr     ldax0sp
	clc
	adc     #<(_VbufferPublic)
	sta     ptr1
	txa
	adc     #>(_VbufferPublic)
	sta     ptr1+1
	lda     #$20
	sta     (ptr1)
	ldx     #$00
	lda     #$01
	jsr     addeq0sp
	bra     L000B
L000C:	jsr     _updateScreen
L000A:	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1)
	cmp     _TknTstEx
	bne     L0010
	jsr     _testExMem
L0010:	ldy     #$03
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	sta     (ptr1)
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

	jsr     push0
	lda     #$02
	jsr     pusha0
	lda     #$38
	jsr     pusha0
	lda     #$16
	jsr     pusha0
	lda     #$1B
	jsr     pusha0
	lda     #$02
	jsr     pusha0
	ldx     #$07
	lda     #$E7
	jsr     pushax
	ldy     #$0B
	jsr     pushwysp
	ldy     #$0B
	jsr     pushwysp
	ldy     #$0B
	jsr     pushwysp
	ldy     #$0B
	jsr     pushwysp
	ldy     #$09
	jsr     ldaxysp
	jsr     _dateToTimestamp
	jsr     pusheax
	jsr     push0
	jsr     pusha
	jsr     decsp7
	ldy     #$06
L0002:	lda     M0001,y
	sta     (sp),y
	dey
	bpl     L0002
	lda     #$00
	jsr     pusha
	lda     _KeyBufferCounter
	sta     _OldKeyBufferCounter
	stz     _InputKeyBufferPointer
	stz     _karnelX
	stz     _karnelX+1
	stz     _karnelY
	stz     _karnelY+1
	jsr     _initIO
	lda     #$14
	jsr     pusha0
	ina
	jsr     pusha0
	lda     #$05
	jsr     pusha0
	lda     #$07
	jsr     pusha0
	tax
	lda     #$E7
	jsr     _dateToTimestamp
	sta     _publicunixTimestamp
	stx     _publicunixTimestamp+1
	ldy     sreg
	sty     _publicunixTimestamp+2
	ldy     sreg+1
	sty     _publicunixTimestamp+3
	jsr     _FloppyMotorOn
	ldx     #$00
	txa
	ldy     #$1B
	jsr     staxysp
L0003:	ldy     #$1C
	jsr     ldaxysp
	cmp     #$29
	txa
	sbc     #$00
	bvc     L0007
	eor     #$80
L0007:	bpl     L0004
	ldy     #$1C
	jsr     ldaxysp
	clc
	adc     #<(_InputKeyBuffer)
	sta     ptr1
	txa
	adc     #>(_InputKeyBuffer)
	sta     ptr1+1
	lda     #$00
	sta     (ptr1)
	ldy     #$1B
	tax
	ina
	jsr     addeqysp
	bra     L0003
L0004:	jsr     _resetBlockPath
L0008:	lda     _publicunixTimestamp+3
	sta     sreg+1
	lda     _publicunixTimestamp+2
	sta     sreg
	ldx     _publicunixTimestamp+1
	lda     _publicunixTimestamp
	jsr     pusheax
	lda     #$13
	jsr     leaa0sp
	jsr     pushax
	lda     #$17
	jsr     leaa0sp
	jsr     pushax
	lda     #$1B
	jsr     leaa0sp
	jsr     pushax
	lda     #$1F
	jsr     leaa0sp
	jsr     pushax
	lda     #$23
	jsr     leaa0sp
	jsr     _timestampToDate
	lda     sp
	ldx     sp+1
	jsr     _keyBoardInputToBufferUpdate
	lda     (sp)
	cmp     #$01
	bne     L000B
	stz     _userInput
L000B:	lda     #<(_InputKeyBuffer)
	ldx     #>(_InputKeyBuffer)
	jsr     pushax
	lda     _userInput
	jsr     pusha
	lda     #$00
	jsr     _karnelPrint
	lda     sp
	ldx     sp+1
	jsr     pushax
	lda     #$0A
	jsr     leaa0sp
	jsr     _UpdateParse
	lda     #$08
	jsr     leaa0sp
	jsr     _doFunction
	jsr     _updateScreen
	jsr     _updateTimeStamp
	lda     #$01
	sta     _userInput
	jmp     L0008

.segment	"RODATA"

M0001:
	.byte	$61,$6C,$6F,$3F,$3F,$3F,$00

.endproc

